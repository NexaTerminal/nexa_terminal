import React, { useState, useEffect } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import Header from '../common/Header';
import Sidebar from './Sidebar';
import RightSidebar from './RightSidebar';
import styles from '../../styles/terminal/UnifiedVerification.module.css';
import dashboardStyles from '../../styles/terminal/Dashboard.module.css';
import ApiService from '../../services/api';

const CompanyVerificationSingle = () => {
  const { t } = useTranslation();
  const { currentUser: user, refreshUser } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [sendingEmail, setSendingEmail] = useState(false);
  const [emailSent, setEmailSent] = useState(false);
  const [showSuccessOptions, setShowSuccessOptions] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Form data for all required fields
  const [formData, setFormData] = useState({
    // Required fields
    companyName: '',
    address: '',
    taxNumber: '',
    companyManager: '',
    officialEmail: '',
    // Optional fields
    businessActivity: '',
    website: '',
    industry: '',
    role: '',
    description: ''
  });

  // Pre-fill form with existing user data and refresh user context
  useEffect(() => {
    // Refresh user data to get latest verification status
    const refreshUserData = async () => {
      try {
        await refreshUser();
      } catch (error) {
        console.error('Failed to refresh user data:', error);
      }
    };
    
    refreshUserData();
  }, []);

  useEffect(() => {
    if (user) {
      setFormData(prev => ({
        ...prev,
        companyName: user.companyInfo?.companyName || '',
        address: user.companyInfo?.companyAddress || user.companyInfo?.address || '',
        taxNumber: user.companyInfo?.companyTaxNumber || user.companyInfo?.taxNumber || '',
        companyManager: user.companyManager || '',
        officialEmail: user.officialEmail || user.email || '',
        businessActivity: user.companyInfo?.businessActivity || '',
        website: user.companyInfo?.website || '',
        industry: user.companyInfo?.industry || '',
        role: user.companyInfo?.role || '',
        description: user.companyInfo?.description || ''
      }));

      // Check if email has been sent before
      setEmailSent(user.verificationStatus === 'email_sent' || false);
    }
  }, [user]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
    setError('');
    setSuccess('');
  };

  const validateForm = () => {
    const required = ['companyName', 'address', 'taxNumber', 'companyManager', 'officialEmail'];
    const missing = required.filter(field => !formData[field]?.trim());
    
    if (missing.length > 0) {
      setError('–í–µ –º–æ–ª–∏–º–µ –ø–æ–ø–æ–ª–Ω–µ—Ç–µ –≥–∏ —Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø–æ–ª–∏—ö–∞ (–∏–º–µ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞, –∞–¥—Ä–µ—Å–∞, –¥–∞–Ω–æ—á–µ–Ω –±—Ä–æ—ò, –º–µ–Ω–∞—ü–µ—Ä –∏ email).');
      return false;
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.officialEmail)) {
      setError('–í–µ –º–æ–ª–∏–º–µ –≤–Ω–µ—Å–µ—Ç–µ –≤–∞–ª–∏–¥–Ω–∞ email –∞–¥—Ä–µ—Å–∞.');
      return false;
    }

    return true;
  };

  const handleSaveProfile = async () => {
    if (!validateForm()) return;

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const response = await ApiService.request('/users/profile', {
        method: 'PUT',
        body: JSON.stringify({
          companyInfo: {
            companyName: formData.companyName,
            companyAddress: formData.address,
            companyTaxNumber: formData.taxNumber,
            businessActivity: formData.businessActivity,
            website: formData.website,
            industry: formData.industry,
            role: formData.role,
            description: formData.description
          },
          companyManager: formData.companyManager,
          officialEmail: formData.officialEmail,
          profileComplete: true
        })
      });

      await refreshUser(); // Refresh user data
      setSuccess('–ü—Ä–æ—Ñ–∏–ª–æ—Ç –µ —É—Å–ø–µ—à–Ω–æ –∞–∂—É—Ä–∏—Ä–∞–Ω!');
      
      // Automatically send verification email after successful profile save
      if (formData.officialEmail?.trim()) {
        await sendVerificationEmailAutomatically();
      }
    } catch (error) {
      console.error('Profile update error:', error);
      setError(error.message || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–æ—Ç.');
    } finally {
      setLoading(false);
    }
  };

  const sendVerificationEmailAutomatically = async () => {
    try {
      const response = await ApiService.request('/verification/send-verification-email', {
        method: 'POST',
        body: JSON.stringify({
          officialEmail: formData.officialEmail,
          companyName: formData.companyName,
          companyManager: formData.companyManager
        })
      });

      if (response.success) {
        setEmailSent(true);
        setSuccess(`–ü—Ä–æ—Ñ–∏–ª–æ—Ç –µ –∞–∂—É—Ä–∏—Ä–∞–Ω! –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–µ–Ω email –µ –ø—Ä–∞—Ç–µ–Ω –Ω–∞ ${formData.officialEmail}. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≥–æ –≤–∞—à–∏–æ—Ç inbox –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ –ª–∏–Ω–∫–æ—Ç –∑–∞ –¥–∞ —ò–∞ –∑–∞–≤—Ä—à–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞—Ç–∞.`);
        
        // Show success for 3 seconds, then show options
        setTimeout(() => {
          setShowSuccessOptions(true);
        }, 3000);
      }
    } catch (error) {
      console.error('Auto email verification error:', error);
      // Don't show error for automatic email - just log it
    }
  };

  const handleSendVerificationEmail = async () => {
    if (!formData.officialEmail?.trim()) {
      setError('–í–µ –º–æ–ª–∏–º–µ –≤–Ω–µ—Å–µ—Ç–µ —Å–ª—É–∂–±–µ–Ω–∞ email –∞–¥—Ä–µ—Å–∞.');
      return;
    }

    // Save profile first if needed
    if (!success) {
      await handleSaveProfile();
      if (error) return; // Don't send email if profile save failed
    }

    setSendingEmail(true);
    setError('');

    try {
      const response = await ApiService.request('/verification/send-verification-email', {
        method: 'POST',
        body: JSON.stringify({
          officialEmail: formData.officialEmail,
          companyName: formData.companyName,
          companyManager: formData.companyManager
        })
      });

      if (response.success) {
        setEmailSent(true);
        setSuccess(`–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–µ–Ω email –µ –ø—Ä–∞—Ç–µ–Ω –Ω–∞ ${formData.officialEmail}. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≥–æ –≤–∞—à–∏–æ—Ç inbox –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ –ª–∏–Ω–∫–æ—Ç –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞.`);
      }
    } catch (error) {
      console.error('Email verification error:', error);
      setError(error.message || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞—ú–∞—ö–µ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–µ–Ω email.');
    } finally {
      setSendingEmail(false);
    }
  };

  const handleResendEmail = async () => {
    setEmailSent(false);
    await handleSendVerificationEmail();
  };

  return (
    <div>
      <Header isTerminal={true} />
      
      <div className={dashboardStyles["dashboard-layout"]}>
        <Sidebar />
        
        <main className={dashboardStyles["dashboard-main"]}>
          <div className={styles.container}>
            <div className={styles.header}>
              <div className={styles.breadcrumb}>
                <button 
                  onClick={() => navigate('/terminal')} 
                  className={styles.backButton}
                >
                  ‚Üê –ù–∞–∑–∞–¥ –∫–æ–Ω Dashboard
                </button>
              </div>
              <h2>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞</h2>
              <p>–í–Ω–µ—Å–µ—Ç–µ –≥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏—Ç–µ –∑–∞ –≤–∞—à–∞—Ç–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞ –∏ –ø–æ—Ç–≤—Ä–¥–µ—Ç–µ –≥–æ email-–æ—Ç –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞</p>
        
        {user?.isVerified && (
          <div className={styles.verificationStatus}>
            <div className={styles.verifiedBadge}>
              ‚úÖ –ö–æ–º–ø–∞–Ω–∏—ò–∞—Ç–∞ –µ –≤–µ—Ä–∏—Ñ–∏–∫—É–≤–∞–Ω–∞
            </div>
            <p>–ß–µ—Å—Ç–∏—Ç–∫–∏! –í–∞—à–∞—Ç–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞ –µ —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫—É–≤–∞–Ω–∞ –∏ –∏–º–∞—Ç–µ –ø—Ä–∏—Å—Ç–∞–ø –¥–æ —Å–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏.</p>
            <div className={styles.accessFeatures}>
              <button 
                onClick={() => navigate('/terminal/documents')}
                className={styles.accessButton}
              >
                üìÑ –ü—Ä–∏—Å—Ç–∞–ø–∏ –¥–æ –î–æ–∫—É–º–µ–Ω—Ç–∏
              </button>
              <button 
                onClick={() => navigate('/terminal/ai-chat')}
                className={styles.accessButton}
              >
                ü§ñ –ö–æ—Ä–∏—Å—Ç–∏ AI –ê—Å–∏—Å—Ç–µ–Ω—Ç
              </button>
            </div>
          </div>
        )}
        
        {user?.profileComplete && !user?.isVerified && (
          <div className={styles.verificationStatus}>
            <div className={styles.pendingBadge}>
              ‚è≥ –ß–µ–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞
            </div>
            <p>–ü—Ä–æ—Ñ–∏–ª–æ—Ç –µ –∫–æ–º–ø–ª–µ—Ç–µ–Ω, –Ω–æ —Ç—Ä–µ–±–∞ –¥–∞ –≥–æ –ø–æ—Ç–≤—Ä–¥–∏—Ç–µ email-ot. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≥–æ –≤–∞—à–∏–æ—Ç inbox –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–µ–Ω –ª–∏–Ω–∫.</p>
          </div>
        )}
      </div>

      {error && (
        <div className={styles.error}>
          {error}
        </div>
      )}

      {success && (
        <div className={styles.success}>
          {success}
        </div>
      )}

      {!user?.isVerified && (
        <div className={styles.form}>
        <div className={styles.section}>
          <h3>–û—Å–Ω–æ–≤–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∑–∞–¥–æ–ª–∂–∏—Ç–µ–ª–Ω–æ)</h3>
          
          <div className={styles.row}>
            <div className={styles.field}>
              <label htmlFor="companyName">–ò–º–µ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞ *</label>
              <input
                type="text"
                id="companyName"
                name="companyName"
                value={formData.companyName}
                onChange={handleInputChange}
                placeholder="–í–Ω–µ—Å–µ—Ç–µ –≥–æ –∏–º–µ—Ç–æ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞—Ç–∞"
                required
              />
            </div>
            
            <div className={styles.field}>
              <label htmlFor="address">–ê–¥—Ä–µ—Å–∞ –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞ *</label>
              <input
                type="text"
                id="address"
                name="address"
                value={formData.address}
                onChange={handleInputChange}
                placeholder="–£–ª–∏—Ü–∞, –±—Ä–æ—ò, –≥—Ä–∞–¥"
                required
              />
            </div>
          </div>

          <div className={styles.row}>
            <div className={styles.field}>
              <label htmlFor="taxNumber">–î–∞–Ω–æ—á–µ–Ω –±—Ä–æ—ò *</label>
              <input
                type="text"
                id="taxNumber"
                name="taxNumber"
                value={formData.taxNumber}
                onChange={handleInputChange}
                placeholder="–í–Ω–µ—Å–µ—Ç–µ –≥–æ –¥–∞–Ω–æ—á–Ω–∏–æ—Ç –±—Ä–æ—ò"
                required
              />
            </div>
            
            <div className={styles.field}>
              <label htmlFor="companyManager">–ú–µ–Ω–∞—ü–µ—Ä/–û–¥–≥–æ–≤–æ—Ä–Ω–æ –ª–∏—Ü–µ *</label>
              <input
                type="text"
                id="companyManager"
                name="companyManager"
                value={formData.companyManager}
                onChange={handleInputChange}
                placeholder="–ò–º–µ –∏ –ø—Ä–µ–∑–∏–º–µ"
                required
              />
            </div>
          </div>

          <div className={styles.field}>
            <label htmlFor="officialEmail">–°–ª—É–∂–±–µ–Ω–∞ email –∞–¥—Ä–µ—Å–∞ *</label>
            <input
              type="email"
              id="officialEmail"
              name="officialEmail"
              value={formData.officialEmail}
              onChange={handleInputChange}
              placeholder="company@example.com"
              required
            />
          </div>
        </div>

        <div className={styles.section}>
          <h3>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª–Ω–æ)</h3>
          
          <div className={styles.row}>
            <div className={styles.field}>
              <label htmlFor="businessActivity">–î–µ—ò–Ω–æ—Å—Ç –Ω–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞—Ç–∞</label>
              <input
                type="text"
                id="businessActivity"
                name="businessActivity"
                value={formData.businessActivity}
                onChange={handleInputChange}
                placeholder="–û–ø–∏—à–µ—Ç–µ —ò–∞ –¥–µ—ò–Ω–æ—Å—Ç–∞"
              />
            </div>
            
            <div className={styles.field}>
              <label htmlFor="website">–í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞</label>
              <input
                type="url"
                id="website"
                name="website"
                value={formData.website}
                onChange={handleInputChange}
                placeholder="https://example.com"
              />
            </div>
          </div>

          <div className={styles.field}>
            <label htmlFor="description">–û–ø–∏—Å</label>
            <textarea
              id="description"
              name="description"
              value={formData.description}
              onChange={handleInputChange}
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ –∫–æ–º–ø–∞–Ω–∏—ò–∞—Ç–∞"
              rows={3}
            />
          </div>
        </div>

        <div className={styles.actions}>
          <button
            type="button"
            onClick={handleSaveProfile}
            disabled={loading}
            className={styles.saveButton}
          >
            {loading ? '–ó–∞—á—É–≤—É–≤–∞...' : '–ó–∞—á—É–≤–∞—ò –ø—Ä–æ—Ñ–∏–ª'}
          </button>

          <button
            type="button"
            onClick={emailSent ? handleResendEmail : handleSendVerificationEmail}
            disabled={sendingEmail || !success}
            className={styles.emailButton}
          >
            {sendingEmail 
              ? '–ò—Å–ø—Ä–∞—ú–∞...' 
              : emailSent 
                ? '–ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø—Ä–∞—Ç–∏ email' 
                : '–ò—Å–ø—Ä–∞—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–µ–Ω email'
            }
          </button>
        </div>

        {emailSent && (
          <div className={styles.emailInfo}>
            <p>üìß –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–µ–Ω email –µ –ø—Ä–∞—Ç–µ–Ω –Ω–∞ <strong>{formData.officialEmail}</strong></p>
            <p>–ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≥–æ –≤–∞—à–∏–æ—Ç inbox (–∏ spam –ø–∞–ø–∫–∞—Ç–∞) –∏ –∫–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ –ª–∏–Ω–∫–æ—Ç –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞.</p>
          </div>
        )}

        {showSuccessOptions && (
          <div className={styles.successActions}>
            <h3>üéâ –°–ª–µ–¥–Ω–∏ —á–µ–∫–æ—Ä–∏</h3>
            <p>–î–æ–¥–µ–∫–∞ —á–µ–∫–∞—Ç–µ –¥–∞ —ò–∞ –∑–∞–≤—Ä—à–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞—Ç–∞ –Ω–∞ email-—Ç–æ, –º–æ–∂–µ—Ç–µ:</p>
            
            <div className={styles.actionButtons}>
              <button 
                onClick={() => navigate('/terminal')}
                className={styles.primaryAction}
              >
                üè† –ù–∞–∑–∞–¥ –∫–æ–Ω Dashboard
              </button>
              
              <button 
                onClick={() => navigate('/terminal/documents')}
                className={styles.secondaryAction}
              >
                üìÑ –†–∞–∑–≥–ª–µ–¥–∞—ò –¥–æ–∫—É–º–µ–Ω—Ç–∏ (–ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞)
              </button>
            </div>
            
            <div className={styles.helpText}>
              <p>üí° <strong>–ü–æ–¥—Å–µ—Ç–Ω–∏–∫:</strong> –û—Ç–∫–∞–∫–æ —ú–µ —ò–∞ –∑–∞–≤—Ä—à–∏—Ç–µ email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—ò–∞—Ç–∞, —ú–µ –∏–º–∞—Ç–µ –ø—Ä–∏—Å—Ç–∞–ø –¥–æ —Å–∏—Ç–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏!</p>
            </div>
          </div>
        )}
        </div>
      )}
          </div>
        </main>
        
        <RightSidebar />
      </div>
    </div>
  );
};

export default CompanyVerificationSingle;