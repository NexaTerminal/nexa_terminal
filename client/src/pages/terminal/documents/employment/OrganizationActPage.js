import React, { useState } from 'react';
import { useAuth } from "../../../../contexts/AuthContext";
import Header from "../../../../components/common/Header";
import Sidebar from "../../../../components/terminal/Sidebar";
import ProfileReminderBanner from "../../../../components/terminal/ProfileReminderBanner";
import FormField from '../../../../components/forms/FormField';
import organizationActConfig from '../../../../config/documents/organizationAct';
import styles from '../../../../styles/terminal/documents/DocumentGeneration.module.css';

/**
 * Organization Act Page
 * Uses the BaseDocumentPage architecture for consistency with other document pages
 * Implements comprehensive multi-step form for organization act generation
 */

const OrganizationActPage = () => {
  const { currentUser } = useAuth();
  const [formData, setFormData] = useState({
    documentDate: '',
    positions: []
  });
  const [isGenerating, setIsGenerating] = useState(false);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleGenerateDocument = async () => {
    setIsGenerating(true);
    try {
      // Ensure positions is always an array when sending to server
      const positionsArray = Array.isArray(formData.positions) 
        ? formData.positions 
        : Object.values(formData.positions || {});
      
      const formDataToSend = {
        ...formData,
        positions: positionsArray
      };
      
      console.log('Sending data:', formDataToSend);
      console.log('Positions count:', positionsArray.length);
      console.log('Positions type:', Array.isArray(positionsArray) ? 'array' : typeof positionsArray);
      
      const response = await fetch('/api/auto-documents/organization-act', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ formData: formDataToSend })
      });

      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `Akt-za-sistematizacija-${new Date().toISOString().split('T')[0]}.docx`;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);
      } else {
        const error = await response.json();
        console.error('Error generating document:', error);
        alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞—ö–µ—Ç–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ—Ç. –í–µ –º–æ–ª–∏–º–µ –æ–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.');
      }
    } catch (error) {
      console.error('Error generating document:', error);
      alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞—ö–µ—Ç–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ—Ç. –í–µ –º–æ–ª–∏–º–µ –æ–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.');
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <>
      <Header isTerminal={true} />
      <div className={styles.dashboardLayout}>
        <Sidebar />
        <main className={styles.dashboardMain}>
          {!currentUser?.profileComplete && <ProfileReminderBanner />}
          
          {/* Full-Width Organogram Section */}
          <div className={styles['organogram-page']}>
            {/* Interactive Organogram */}
            <div className={styles['organogram-container']}>
              <InteractiveOrgTreeBuilder
                positions={formData.positions || []}
                onChange={handleInputChange}
                isGenerating={isGenerating}
              />
            </div>

            {/* Minimal Date Section and Generate Button */}
            <div className={styles['bottom-controls']}>
              <div className={styles['minimal-date-section']}>
                <FormField
                  field={organizationActConfig.fields.documentDate}
                  value={formData.documentDate}
                  formData={formData}
                  onChange={handleInputChange}
                  disabled={isGenerating}
                />
              </div>
              
              <button 
                className={styles['generate-btn']}
                onClick={handleGenerateDocument}
                disabled={isGenerating || !formData.documentDate || formData.positions.length === 0}
              >
                {isGenerating ? '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä–∞—ö–µ...' : 'üìÑ –ì–µ–Ω–µ—Ä–∏—Ä–∞—ò –¥–æ–∫—É–º–µ–Ω—Ç'}
              </button>
            </div>
          </div>
        </main>
      </div>
    </>
  );
};

/**
 * Organization Analytics Component - Phase 3
 * Advanced validation, analytics, and enterprise recommendations
 */
const OrganizationAnalytics = ({ positions }) => {
  const [activeTab, setActiveTab] = useState('analytics');
  const [selectedExport, setSelectedExport] = useState('pdf');

  // Calculate organizational metrics
  const calculateMetrics = () => {
    if (!positions || positions.length === 0) return null;

    const hierarchyMap = {};
    const rootPositions = [];
    let maxDepth = 0;
    let totalEmployees = 0;

    // Build hierarchy map
    positions.forEach(pos => {
      hierarchyMap[pos.id] = { ...pos, children: [], level: 0 };
      const empCount = parseInt(pos.numberOfEmployees?.match(/\d+/)?.[0] || '0');
      totalEmployees += empCount;
    });

    // Calculate levels and build tree
    positions.forEach(pos => {
      if (pos.parentId && hierarchyMap[pos.parentId]) {
        hierarchyMap[pos.parentId].children.push(hierarchyMap[pos.id]);
        hierarchyMap[pos.id].level = hierarchyMap[pos.parentId].level + 1;
        maxDepth = Math.max(maxDepth, hierarchyMap[pos.id].level);
      } else {
        rootPositions.push(hierarchyMap[pos.id]);
      }
    });

    // Calculate span of control
    const spanOfControl = positions.map(pos => {
      const directReports = positions.filter(p => p.parentId === pos.id).length;
      return { positionName: pos.positionName, span: directReports };
    }).filter(item => item.span > 0);

    const avgSpan = spanOfControl.length > 0 
      ? spanOfControl.reduce((sum, item) => sum + item.span, 0) / spanOfControl.length 
      : 0;

    return {
      totalPositions: positions.length,
      totalEmployees,
      hierarchyDepth: maxDepth + 1,
      spanOfControl: avgSpan,
      rootPositions: rootPositions.length,
      managerPositions: spanOfControl.length,
      leafPositions: positions.filter(pos => !positions.some(p => p.parentId === pos.id)).length
    };
  };

  // Analyze organizational issues
  const analyzeIssues = () => {
    const metrics = calculateMetrics();
    if (!metrics) return [];

    const issues = [];

    // Span of control analysis
    if (metrics.spanOfControl > 8) {
      issues.push({
        type: 'warning',
        title: '–®–∏—Ä–æ–∫ –æ–ø—Å–µ–≥ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∞',
        description: `–ü—Ä–æ—Å–µ—á–Ω–∏–æ—Ç –º–µ–Ω–∞—ü–µ—Ä –∏–º–∞ ${metrics.spanOfControl.toFixed(1)} –¥–∏—Ä–µ–∫—Ç–Ω–∏ –ø–æ–¥—Ä–µ–¥–µ–Ω–∏. –ü—Ä–µ–ø–æ—Ä–∞—á—É–≤–∞ —Å–µ 3-7.`,
        recommendation: '–†–∞–∑–≥–ª–µ–¥–∞—ò—Ç–µ –¥–æ–¥–∞–≤–∞—ö–µ —Å—Ä–µ–¥–Ω–∏ –º–µ–Ω–∞—ü–µ—Ä—Å–∫–∏ –ø–æ–∑–∏—Ü–∏–∏.'
      });
    } else if (metrics.spanOfControl < 2 && metrics.managerPositions > 1) {
      issues.push({
        type: 'info',
        title: '–¢–µ—Å–µ–Ω –æ–ø—Å–µ–≥ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∞',
        description: `–ü—Ä–æ—Å–µ—á–Ω–∏–æ—Ç –º–µ–Ω–∞—ü–µ—Ä –∏–º–∞ ${metrics.spanOfControl.toFixed(1)} –¥–∏—Ä–µ–∫—Ç–Ω–∏ –ø–æ–¥—Ä–µ–¥–µ–Ω–∏.`,
        recommendation: '–ú–æ–∂–µ–±–∏ –º–æ–∂–µ—Ç–µ –¥–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–∞—Ç–µ –Ω–µ–∫–æ–∏ –º–µ–Ω–∞—ü–µ—Ä—Å–∫–∏ –ø–æ–∑–∏—Ü–∏–∏.'
      });
    }

    // Hierarchy depth analysis
    if (metrics.hierarchyDepth > 6) {
      issues.push({
        type: 'error',
        title: '–ü—Ä–µ–º–Ω–æ–≥—É –¥–ª–∞–±–æ–∫–∞ —Ö–∏–µ—Ä–∞—Ä—Ö–∏—ò–∞',
        description: `–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—ò–∞—Ç–∞ –∏–º–∞ ${metrics.hierarchyDepth} –Ω–∏–≤–æ–∞. –ü—Ä–µ–ø–æ—Ä–∞—á—É–≤–∞ —Å–µ –º–∞–∫—Å–∏–º—É–º 5-6.`,
        recommendation: '–†–∞–∑–≥–ª–µ–¥–∞—ò—Ç–µ —Ä–∞–º–Ω—É–≤–∞—ö–µ –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞.'
      });
    }

    // Multiple root analysis
    if (metrics.rootPositions > 3) {
      issues.push({
        type: 'warning',
        title: '–ú–Ω–æ–≥—É –≤—Ä–≤–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏',
        description: `–ò–º–∞—Ç–µ ${metrics.rootPositions} –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –≤—Ä–≤–æ—Ç –±–µ–∑ –Ω–∞–¥—Ä–µ–¥–µ–Ω–∏.`,
        recommendation: '–†–∞–∑–≥–ª–µ–¥–∞—ò—Ç–µ –Ω–æ–º–∏–Ω–∏—Ä–∞—ö–µ –≥–ª–∞–≤–Ω–∞ –∏–∑–≤—Ä—à–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞.'
      });
    }

    // Empty positions analysis
    const incompletePositions = positions.filter(pos => !pos.positionName || !pos.numberOfEmployees).length;
    if (incompletePositions > 0) {
      issues.push({
        type: 'warning',
        title: '–ù–µ–¥–æ–ø–æ–ª–Ω–µ—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏',
        description: `${incompletePositions} –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ–º–∞–∞—Ç –∫–æ–º–ø–ª–µ—Ç–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`,
        recommendation: '–î–æ–ø–æ–ª–Ω–µ—Ç–µ –≥–∏ —Å–∏—Ç–µ –∑–∞–¥–æ–ª–∂–∏—Ç–µ–ª–Ω–∏ –ø–æ–ª–∏—ö–∞.'
      });
    }

    return issues;
  };

  // Generate recommendations
  const generateRecommendations = () => {
    const metrics = calculateMetrics();
    const issues = analyzeIssues();
    if (!metrics) return [];

    const recommendations = [];

    // Based on company size
    if (metrics.totalEmployees < 10) {
      recommendations.push({
        priority: 'low',
        title: '–ú–∞–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—ò–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–∞—ò –∑–∞ —Ñ–ª–µ–∫—Å–∏–±–∏–ª–Ω–æ—Å—Ç',
        description: '–°–æ –ø–æ–º–∞–ª–∫—É –æ–¥ 10 –≤—Ä–∞–±–æ—Ç–µ–Ω–∏, —Ñ–æ–∫—É—Å–∏—Ä–∞—ò—Ç–µ —Å–µ –Ω–∞ —ò–∞—Å–Ω–∏ –æ–¥–≥–æ–≤–æ—Ä–Ω–æ—Å—Ç–∏ –Ω–∞–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–≥–∞ —Ö–∏–µ—Ä–∞—Ä—Ö–∏—ò–∞.',
        actions: ['–ù–∞–º–∞–ª–µ—Ç–µ –Ω–∏–≤–æ–∞', '–ó–≥–æ–ª–µ–º–µ—Ç–µ –∞–≤—Ç–æ–Ω–æ–º–∏—ò–∞']
      });
    } else if (metrics.totalEmployees > 100) {
      recommendations.push({
        priority: 'high',
        title: '–ì–æ–ª–µ–º–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—ò–∞ - –ø–æ—Ç—Ä–µ–±–Ω–∞ –µ —Å—Ç–∞–Ω–¥–∞—Ä–¥–∏–∑–∞—Ü–∏—ò–∞',
        description: '–°–æ –Ω–∞–¥ 100 –≤—Ä–∞–±–æ—Ç–µ–Ω–∏, –≤–∞–∂–Ω–æ –µ –¥–∞ –∏–º–∞—Ç–µ —ò–∞—Å–Ω–∏ –ø—Ä–æ—Ü–µ—Å–∏ –∏ –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—Å–∫–∏ –∫–∞–Ω–∞–ª–∏.',
        actions: ['–°—Ç–∞–Ω–¥–∞—Ä–¥–∏–∑–∏—Ä–∞—ò –ø—Ä–æ—Ü–µ—Å–∏', '–î–µ—Ñ–∏–Ω–∏—Ä–∞—ò —É–ª–æ–≥–∏']
      });
    }

    // Critical issues first
    if (issues.some(issue => issue.type === 'error')) {
      recommendations.unshift({
        priority: 'high',
        title: '–ö—Ä–∏—Ç–∏—á–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏ –≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ç–∞',
        description: '–î–µ—Ç–µ–∫—Ç–∏—Ä–∞–Ω–∏ —Å–µ –∫—Ä–∏—Ç–∏—á–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏ —à—Ç–æ –º–æ–∂–∞—Ç –¥–∞ –≤–ª–∏—ò–∞–∞—Ç –Ω–∞ –µ—Ñ–∏–∫–∞—Å–Ω–æ—Å—Ç–∞.',
        actions: ['–û—Ç—Å—Ç—Ä–∞–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏', '–†–µ–≤–∏–∑–∏—ò–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞']
      });
    }

    return recommendations;
  };

  const metrics = calculateMetrics();
  const issues = analyzeIssues();
  const recommendations = generateRecommendations();

  // Handle export functionality
  const handleExport = () => {
    const exportData = {
      positions,
      metrics,
      issues,
      recommendations,
      exportedAt: new Date().toISOString()
    };

    switch (selectedExport) {
      case 'json':
        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'organizational-analysis.json';
        a.click();
        break;
      case 'csv':
        const csvData = positions.map(pos => ({
          'Position': pos.positionName || '',
          'Employees': pos.numberOfEmployees || '',
          'Parent': positions.find(p => p.id === pos.parentId)?.positionName || '',
          'Education': pos.educationRequirements || '',
          'Experience': pos.experienceRequirements || ''
        }));
        // Convert to CSV string and download
        console.log('CSV export:', csvData);
        break;
      default:
        console.log('PDF export not implemented yet');
    }
  };

  if (!positions || positions.length === 0) {
    return (
      <div className={styles['analytics-panel']}>
        <h3 className={styles['analytics-title']}>üìä –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
        <p style={{ color: '#6b7280', textAlign: 'center', padding: '2rem' }}>
          –î–æ–¥–∞—ò—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞ –¥–∞ –≤–∏–¥–∏—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–µ–ø–æ—Ä–∞–∫–∏
        </p>
      </div>
    );
  }

  return (
    <div className={styles['analytics-panel']}>
      <div className={styles['analytics-header']}>
        <h3 className={styles['analytics-title']}>üìä –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
      </div>

      {/* Tabs */}
      <div className={styles['analytics-tabs']}>
        <button 
          className={`${styles['analytics-tab']} ${activeTab === 'analytics' ? styles.active : ''}`}
          onClick={() => setActiveTab('analytics')}
        >
          –ú–µ—Ç—Ä–∏–∫–∏
        </button>
        <button 
          className={`${styles['analytics-tab']} ${activeTab === 'issues' ? styles.active : ''}`}
          onClick={() => setActiveTab('issues')}
        >
          –ü—Ä–æ–±–ª–µ–º–∏ ({issues.length})
        </button>
        <button 
          className={`${styles['analytics-tab']} ${activeTab === 'recommendations' ? styles.active : ''}`}
          onClick={() => setActiveTab('recommendations')}
        >
          –ü—Ä–µ–ø–æ—Ä–∞–∫–∏
        </button>
        <button 
          className={`${styles['analytics-tab']} ${activeTab === 'export' ? styles.active : ''}`}
          onClick={() => setActiveTab('export')}
        >
          –ò–∑–≤–æ–∑
        </button>
      </div>

      {/* Analytics Tab */}
      {activeTab === 'analytics' && (
        <div className={styles['metrics-grid']}>
          <div className={styles['metric-card']}>
            <div className={styles['metric-value']}>{metrics?.totalPositions || 0}</div>
            <div className={styles['metric-label']}>–í–∫—É–ø–Ω–æ –ø–æ–∑–∏—Ü–∏–∏</div>
          </div>
          <div className={styles['metric-card']}>
            <div className={styles['metric-value']}>{metrics?.totalEmployees || 0}</div>
            <div className={styles['metric-label']}>–í–∫—É–ø–Ω–æ –≤—Ä–∞–±–æ—Ç–µ–Ω–∏</div>
          </div>
          <div className={styles['metric-card']}>
            <div className={styles['metric-value']}>{metrics?.hierarchyDepth || 0}</div>
            <div className={styles['metric-label']}>–î–ª–∞–±–æ—á–∏–Ω–∞ –Ω–∞ —Ö–∏–µ—Ä–∞—Ä—Ö–∏—ò–∞</div>
            <div className={`${styles['metric-trend']} ${metrics?.hierarchyDepth > 5 ? styles.negative : styles.positive}`}>
              {metrics?.hierarchyDepth > 5 ? '‚ö†Ô∏è –ü—Ä–µ–º–Ω–æ–≥—É –¥–ª–∞–±–æ–∫–æ' : '‚úÖ –û–ø—Ç–∏–º–∞–ª–Ω–æ'}
            </div>
          </div>
          <div className={styles['metric-card']}>
            <div className={styles['metric-value']}>{metrics?.spanOfControl.toFixed(1) || '0.0'}</div>
            <div className={styles['metric-label']}>–ü—Ä–æ—Å–µ—á–µ–Ω –æ–ø—Å–µ–≥ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∞</div>
            <div className={`${styles['metric-trend']} ${
              metrics?.spanOfControl > 8 ? styles.negative : 
              metrics?.spanOfControl < 2 ? styles.neutral : 
              styles.positive
            }`}>
              {metrics?.spanOfControl > 8 ? 'üìà –ü—Ä–µ—à–∏—Ä–æ–∫' : 
               metrics?.spanOfControl < 2 ? 'üìâ –ü—Ä–µ—Ç–µ—Å–µ–Ω' : 
               '‚úÖ –î–æ–±–∞—Ä'}
            </div>
          </div>
        </div>
      )}

      {/* Issues Tab */}
      {activeTab === 'issues' && (
        <div className={styles['validation-issues']}>
          {issues.length === 0 ? (
            <div style={{ textAlign: 'center', padding: '2rem', color: '#16a34a' }}>
              <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>‚úÖ</div>
              <h4>–ù–µ–º–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–∞–Ω–∏ –ø—Ä–æ–±–ª–µ–º–∏</h4>
              <p>–í–∞—à–∞—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–≥–ª–µ–¥–∞ –¥–æ–±—Ä–æ!</p>
            </div>
          ) : (
            issues.map((issue, index) => (
              <div key={index} className={styles['issue-item']}>
                <div className={`${styles['issue-icon']} ${styles[issue.type]}`}>
                  {issue.type === 'error' ? '!' : issue.type === 'warning' ? '‚ö†' : 'i'}
                </div>
                <div className={styles['issue-content']}>
                  <h4 className={styles['issue-title']}>{issue.title}</h4>
                  <p className={styles['issue-description']}>{issue.description}</p>
                  <p className={styles['issue-recommendation']}>üí° {issue.recommendation}</p>
                </div>
              </div>
            ))
          )}
        </div>
      )}

      {/* Recommendations Tab */}
      {activeTab === 'recommendations' && (
        <div className={styles['recommendations']}>
          {recommendations.map((rec, index) => (
            <div key={index} className={`${styles['recommendation-card']} ${styles[`${rec.priority}-priority`]}`}>
              <div className={styles['recommendation-header']}>
                <h4 className={styles['recommendation-title']}>{rec.title}</h4>
                <span className={`${styles['recommendation-priority']} ${styles[rec.priority]}`}>
                  {rec.priority === 'high' ? '–í–∏—Å–æ–∫' : rec.priority === 'medium' ? '–°—Ä–µ–¥–µ–Ω' : '–ù–∏–∑–æ–∫'}
                </span>
              </div>
              <p className={styles['recommendation-description']}>{rec.description}</p>
              <div className={styles['recommendation-actions']}>
                {rec.actions?.map((action, idx) => (
                  <button key={idx} className={`${styles['recommendation-btn']} ${styles.secondary}`}>
                    {action}
                  </button>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Export Tab */}
      {activeTab === 'export' && (
        <div className={styles['export-panel']}>
          <div className={styles['export-options']}>
            <div 
              className={`${styles['export-option']} ${selectedExport === 'pdf' ? styles.selected : ''}`}
              onClick={() => setSelectedExport('pdf')}
            >
              <div className={styles['export-icon']}>üìÑ</div>
              <div className={styles['export-title']}>PDF –ò–∑–≤–µ—à—Ç–∞—ò</div>
              <div className={styles['export-description']}>
                –ö–æ–º–ø–ª–µ—Ç–µ–Ω –∏–∑–≤–µ—à—Ç–∞—ò —Å–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –ø—Ä–µ–ø–æ—Ä–∞–∫–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞ —à–µ–º–∞
              </div>
            </div>
            <div 
              className={`${styles['export-option']} ${selectedExport === 'json' ? styles.selected : ''}`}
              onClick={() => setSelectedExport('json')}
            >
              <div className={styles['export-icon']}>üìä</div>
              <div className={styles['export-title']}>JSON –ü–æ–¥–∞—Ç–æ—Ü–∏</div>
              <div className={styles['export-description']}>
                –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–∞–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—ò–∞ —Å–æ HR —Å–∏—Å—Ç–µ–º–∏
              </div>
            </div>
            <div 
              className={`${styles['export-option']} ${selectedExport === 'csv' ? styles.selected : ''}`}
              onClick={() => setSelectedExport('csv')}
            >
              <div className={styles['export-icon']}>üìã</div>
              <div className={styles['export-title']}>CSV –¢–∞–±–µ–ª–∞</div>
              <div className={styles['export-description']}>
                –¢–∞–±–µ–ª–∞—Ä–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ –∑–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ Excel –∏–ª–∏ Google Sheets
              </div>
            </div>
          </div>
          <div className={styles['export-actions']}>
            <div style={{ fontSize: '0.8rem', color: '#6b7280' }}>
              –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞—ò –≥–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏—Ç–µ –≤–æ –∏–∑–±—Ä–∞–Ω–∏–æ—Ç —Ñ–æ—Ä–º–∞—Ç
            </div>
            <button className={styles['export-btn']} onClick={handleExport}>
              üì§ –ï–∫—Å–ø–æ—Ä—Ç–∏—Ä–∞—ò {selectedExport.toUpperCase()}
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

/**
 * Live Tree Visualization Component - Phase 2
 * Interactive drag-and-drop organizational hierarchy builder
 */
const LiveTreeVisualization = ({ positions, onChange }) => {
  const [editingNodeId, setEditingNodeId] = useState(null);
  const [draggedNodeId, setDraggedNodeId] = useState(null);
  const [dropTargetId, setDropTargetId] = useState(null);
  const [isDropTargetChild, setIsDropTargetChild] = useState(false);
  const [treeZoom, setTreeZoom] = useState(1);
  const [treePan, setTreePan] = useState({ x: 0, y: 0 });
  const [collapsedNodes, setCollapsedNodes] = useState(new Set());

  // Build hierarchy tree structure
  const buildHierarchyTree = () => {
    const hierarchyMap = {};
    const rootNodes = [];
    
    // Initialize all positions
    positions.forEach(position => {
      hierarchyMap[position.id] = {
        ...position,
        children: [],
        level: 0
      };
    });
    
    // Build parent-child relationships
    positions.forEach(position => {
      if (position.parentId && hierarchyMap[position.parentId]) {
        hierarchyMap[position.parentId].children.push(hierarchyMap[position.id]);
        hierarchyMap[position.id].level = hierarchyMap[position.parentId].level + 1;
      } else {
        rootNodes.push(hierarchyMap[position.id]);
      }
    });
    
    return { hierarchyMap, rootNodes };
  };

  const { hierarchyMap, rootNodes } = buildHierarchyTree();

  if (!positions || positions.length === 0) {
    return (
      <div className={styles['org-chart-empty']}>
        <div className={styles['org-chart-empty-icon']}>üè¢</div>
        <h5>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞</h5>
        <p>–î–æ–¥–∞—ò—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞ –¥–∞ –≤–∏–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞ —à–µ–º–∞ –≤–æ —Ä–µ–∞–ª–Ω–æ –≤—Ä–µ–º–µ</p>
      </div>
    );
  }

  // Drag and drop handlers
  const handleDragStart = (e, position) => {
    setDraggedNodeId(position.id);
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', position.id);
  };

  const handleDragOver = (e, position) => {
    e.preventDefault();
    if (draggedNodeId && draggedNodeId !== position.id) {
      setDropTargetId(position.id);
      // Check if making this a child relationship
      const makeChild = e.ctrlKey || e.metaKey;
      setIsDropTargetChild(makeChild);
      e.dataTransfer.dropEffect = makeChild ? 'link' : 'move';
    }
  };

  const handleDrop = (e, targetPosition) => {
    e.preventDefault();
    if (draggedNodeId && draggedNodeId !== targetPosition.id) {
      const makeChild = e.ctrlKey || e.metaKey;
      updateHierarchy(draggedNodeId, makeChild ? targetPosition.id : null);
    }
    // Reset drag state
    setDraggedNodeId(null);
    setDropTargetId(null);
    setIsDropTargetChild(false);
  };

  const handleDragEnd = () => {
    setDraggedNodeId(null);
    setDropTargetId(null);
    setIsDropTargetChild(false);
  };

  // Update position hierarchy
  const updateHierarchy = (positionId, newParentId) => {
    const updatedPositions = positions.map(pos => {
      if (pos.id === positionId) {
        return { ...pos, parentId: newParentId };
      }
      return pos;
    });
    onChange('positions', updatedPositions);
  };

  // Node click handler
  const handleNodeClick = (position) => {
    if (!draggedNodeId) {
      setEditingNodeId(position.id);
      // Scroll to the corresponding card in the left panel
      const cardElement = document.querySelector(`[data-position-id="${position.id}"]`);
      if (cardElement) {
        cardElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  };

  // Tree controls
  const handleZoomIn = () => setTreeZoom(prev => Math.min(prev + 0.2, 2));
  const handleZoomOut = () => setTreeZoom(prev => Math.max(prev - 0.2, 0.5));
  const handleResetView = () => {
    setTreeZoom(1);
    setTreePan({ x: 0, y: 0 });
  };

  // Toggle node collapse
  const toggleNodeCollapse = (nodeId) => {
    setCollapsedNodes(prev => {
      const newSet = new Set(prev);
      if (newSet.has(nodeId)) {
        newSet.delete(nodeId);
      } else {
        newSet.add(nodeId);
      }
      return newSet;
    });
  };

  // Render tree node recursively
  const renderTreeNode = (node, level = 0, siblingIndex = 0) => {
    const isComplete = node.positionName && node.numberOfEmployees;
    const isEditing = editingNodeId === node.id;
    const isDragging = draggedNodeId === node.id;
    const isDropTarget = dropTargetId === node.id;
    const isCollapsed = collapsedNodes.has(node.id);
    const hasChildren = node.children && node.children.length > 0;
    
    const xPosition = level * 180 + 20;
    const yPosition = siblingIndex * 100 + level * 20 + 20;

    return (
      <React.Fragment key={node.id}>
        <div
          className={`${
            styles['tree-node']
          } ${
            styles.draggable
          } ${
            isComplete ? styles.complete : ''
          } ${
            isEditing ? styles.editing : ''
          } ${
            isDragging ? styles.dragging : ''
          } ${
            isDropTarget ? (isDropTargetChild ? styles['drop-target-child'] : styles['drop-target']) : ''
          }`}
          style={{
            top: `${yPosition}px`,
            left: `${xPosition}px`,
            transform: `scale(${treeZoom}) translate(${treePan.x}px, ${treePan.y}px)`
          }}
          draggable
          onDragStart={(e) => handleDragStart(e, node)}
          onDragOver={(e) => handleDragOver(e, node)}
          onDrop={(e) => handleDrop(e, node)}
          onDragEnd={handleDragEnd}
          onClick={() => handleNodeClick(node)}
        >
          {/* Hierarchy indicator */}
          {level > 0 && (
            <div className={`${styles['hierarchy-indicator']} ${styles.child}`}>
              {level}
            </div>
          )}
          
          {/* Node content */}
          <div className={styles['tree-node-title']}>
            {node.positionName || '[–ü–æ–∑–∏—Ü–∏—ò–∞]'}
          </div>
          <div className={styles['tree-node-subtitle']}>
            {node.numberOfEmployees || '[–ë—Ä–æ—ò]'} –≤—Ä–∞–±–æ—Ç–µ–Ω–∏
          </div>
          
          {/* Collapse/expand toggle */}
          {hasChildren && (
            <div
              className={`${
                styles['tree-node-toggle']
              } ${
                styles['has-children']
              } ${
                isCollapsed ? styles.collapsed : styles.expanded
              }`}
              onClick={(e) => {
                e.stopPropagation();
                toggleNodeCollapse(node.id);
              }}
            />
          )}
        </div>
        
        {/* Connection lines */}
        {level > 0 && (
          <>
            <div
              className={`${styles['hierarchy-connection']} ${styles.horizontal}`}
              style={{
                top: `${yPosition + 25}px`,
                left: `${xPosition - 60}px`,
                width: '50px'
              }}
            />
            <div
              className={`${styles['hierarchy-connection']} ${styles.vertical}`}
              style={{
                top: `${yPosition - 25}px`,
                left: `${xPosition - 60}px`,
                height: '50px'
              }}
            />
          </>
        )}
        
        {/* Render children */}
        {hasChildren && !isCollapsed && (
          <div className={styles['tree-node-children']}>
            {node.children.map((child, index) => 
              renderTreeNode(child, level + 1, index)
            )}
          </div>
        )}
      </React.Fragment>
    );
  };

  return (
    <div>
      {/* Tree controls */}
      <div className={styles['tree-controls']}>
        <button 
          className={styles['tree-control-btn']} 
          onClick={handleZoomOut}
          title="–ù–∞–º–∞–ª–∏"
        >
          üîç‚àí
        </button>
        <button 
          className={styles['tree-control-btn']} 
          onClick={handleZoomIn}
          title="–ó–≥–æ–ª–µ–º–∏"
        >
          üîç+
        </button>
        <button 
          className={styles['tree-control-btn']} 
          onClick={handleResetView}
          title="–†–µ—Å–µ—Ç–∏—Ä–∞—ò –ø–æ–≥–ª–µ–¥"
        >
          üéØ
        </button>
        <div style={{ fontSize: '0.75rem', color: '#64748b', marginLeft: '0.5rem' }}>
          üí° –î—Ä–∂–∏ Ctrl/Cmd + –≤–ª–µ—á–∏ –∑–∞ —Ö–∏–µ—Ä–∞—Ä—Ö–∏—ò–∞
        </div>
      </div>
      
      {/* Tree canvas */}
      <div className={styles['tree-canvas']}>
        <div className={styles['tree-viewport']}>
          <div className={styles['tree-container']} style={{ position: 'relative', minHeight: '400px' }}>
            {rootNodes.map((node, index) => renderTreeNode(node, 0, index))}
            
            {/* Drop zones for root level */}
            {draggedNodeId && (
              <div
                className={`${styles['drop-zone']} ${dropTargetId === 'root' ? styles.highlight : ''}`}
                style={{
                  position: 'absolute',
                  top: `${rootNodes.length * 100 + 40}px`,
                  left: '20px',
                  width: '200px'
                }}
                onDragOver={(e) => {
                  e.preventDefault();
                  setDropTargetId('root');
                  setIsDropTargetChild(false);
                }}
                onDrop={(e) => {
                  e.preventDefault();
                  if (draggedNodeId) {
                    updateHierarchy(draggedNodeId, null);
                  }
                  setDraggedNodeId(null);
                  setDropTargetId(null);
                }}
              >
                üìã –î–æ–¥–∞—ò –∫–∞–∫–æ –≥–ª–∞–≤–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

/**
 * Interactive Org Tree Builder - NEW ENHANCED VERSION
 * Hierarchical tree structure with +/- buttons, modal editing, and drag-and-drop
 * Matches the exact requirements from organizationAct.md
 */
const InteractiveOrgTreeBuilder = ({ positions, onChange, isGenerating }) => {
  const [selectedNodeId, setSelectedNodeId] = useState(null);
  const [editingNodeId, setEditingNodeId] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [expandedNodes, setExpandedNodes] = useState(new Set());
  const [draggedNodeId, setDraggedNodeId] = useState(null);
  const [dropTargetId, setDropTargetId] = useState(null);

  // Add root-level position - fixed
  const addNewRootPosition = () => {
    const newPosition = {
      id: Date.now(),
      positionName: '',
      numberOfEmployees: '',
      educationRequirements: '',
      experienceRequirements: '',
      responsibilities: [],
      parentId: null,
      level: 0
    };
    
    const updatedPositions = [...positions, newPosition];
    onChange('positions', updatedPositions);
    
    // Open modal for immediate editing
    setEditingNodeId(newPosition.id);
    setShowModal(true);
  };

  // Initialize with root position if empty - use useEffect to avoid setState during render
  const [hasInitialized, setHasInitialized] = useState(false);
  
  React.useEffect(() => {
    if (!hasInitialized && (!positions || positions.length === 0)) {
      const rootPosition = {
        id: Date.now(),
        positionName: '',
        numberOfEmployees: '',
        educationRequirements: '',
        experienceRequirements: '',
        responsibilities: [],
        parentId: null,
        level: 0
      };
      onChange('positions', [rootPosition]);
      setHasInitialized(true);
    }
  }, [positions, onChange, hasInitialized]);

  if (!positions || positions.length === 0) {
    return (
      <div className={styles['org-tree-builder']}>
        <div className={styles['tree-header']}>
          <h3 className={styles['tree-title']}>üè¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞</h3>
          <div className={styles['tree-actions']}>
            <button
              className={styles['add-root-btn']}
              onClick={addNewRootPosition}
              disabled={isGenerating}
            >
              ‚ûï –î–æ–¥–∞—ò –≥–ª–∞–≤–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞
            </button>
          </div>
        </div>
        <div className={styles['empty-tree']}>
          <p>–ö–ª–∏–∫–Ω–µ—Ç–µ "–î–æ–¥–∞—ò –≥–ª–∞–≤–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞" –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ —Å–æ –∏–∑–≥—Ä–∞–¥–±–∞—Ç–∞ –Ω–∞ –≤–∞—à–∞—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—ò–∞</p>
        </div>
      </div>
    );
  }

  // Build hierarchical tree structure
  const buildHierarchyTree = () => {
    const positionMap = {};
    const rootNodes = [];
    
    // Initialize all positions
    positions.forEach(position => {
      positionMap[position.id] = {
        ...position,
        children: [],
        level: 0
      };
    });
    
    // Build parent-child relationships and calculate levels
    positions.forEach(position => {
      if (position.parentId && positionMap[position.parentId]) {
        positionMap[position.parentId].children.push(positionMap[position.id]);
        positionMap[position.id].level = positionMap[position.parentId].level + 1;
      } else {
        rootNodes.push(positionMap[position.id]);
      }
    });
    
    return { positionMap, rootNodes };
  };

  // Add new position as child
  const addChildPosition = (parentId) => {
    const newPosition = {
      id: Date.now(),
      positionName: '',
      numberOfEmployees: '',
      educationRequirements: '',
      experienceRequirements: '',
      responsibilities: [],
      parentId: parentId,
      level: 0
    };
    
    const updatedPositions = [...positions, newPosition];
    onChange('positions', updatedPositions);
    
    // Auto-expand parent node
    setExpandedNodes(prev => new Set([...prev, parentId]));
    
    // Open modal for immediate editing
    setEditingNodeId(newPosition.id);
    setShowModal(true);
  };

  // Delete position and all its children
  const deletePosition = (positionId) => {
    const getAllChildren = (id) => {
      const children = positions.filter(p => p.parentId === id);
      let allChildren = [...children];
      children.forEach(child => {
        allChildren = [...allChildren, ...getAllChildren(child.id)];
      });
      return allChildren;
    };

    const toDelete = [positionId, ...getAllChildren(positionId).map(p => p.id)];
    const updatedPositions = positions.filter(p => !toDelete.includes(p.id));
    onChange('positions', updatedPositions);
    
    // Clean up UI state
    setExpandedNodes(prev => {
      const newSet = new Set(prev);
      toDelete.forEach(id => newSet.delete(id));
      return newSet;
    });
    
    if (selectedNodeId && toDelete.includes(selectedNodeId)) {
      setSelectedNodeId(null);
    }
  };

  // Toggle node expansion
  const toggleNodeExpansion = (nodeId) => {
    setExpandedNodes(prev => {
      const newSet = new Set(prev);
      if (newSet.has(nodeId)) {
        newSet.delete(nodeId);
      } else {
        newSet.add(nodeId);
      }
      return newSet;
    });
  };

  // Open position edit modal
  const editPosition = (position) => {
    setEditingNodeId(position.id);
    setShowModal(true);
  };

  // Save edited position
  const savePosition = (updatedData) => {
    const updatedPositions = positions.map(pos => 
      pos.id === editingNodeId ? { ...pos, ...updatedData } : pos
    );
    onChange('positions', updatedPositions);
    setShowModal(false);
    setEditingNodeId(null);
  };

  // Drag and drop handlers
  const handleDragStart = (e, nodeId) => {
    setDraggedNodeId(nodeId);
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', nodeId);
  };

  const handleDragOver = (e, nodeId) => {
    e.preventDefault();
    if (draggedNodeId && draggedNodeId !== nodeId) {
      setDropTargetId(nodeId);
      e.dataTransfer.dropEffect = 'move';
    }
  };

  const handleDrop = (e, targetNodeId) => {
    e.preventDefault();
    if (draggedNodeId && draggedNodeId !== targetNodeId) {
      // Prevent dropping parent onto its own child
      const isChildOfDragged = (potentialChild, parent) => {
        const children = positions.filter(p => p.parentId === parent);
        if (children.some(child => child.id === potentialChild)) return true;
        return children.some(child => isChildOfDragged(potentialChild, child.id));
      };

      if (!isChildOfDragged(targetNodeId, draggedNodeId)) {
        const updatedPositions = positions.map(pos => 
          pos.id === draggedNodeId ? { ...pos, parentId: targetNodeId } : pos
        );
        onChange('positions', updatedPositions);
        
        // Auto-expand target node
        setExpandedNodes(prev => new Set([...prev, targetNodeId]));
      }
    }
    setDraggedNodeId(null);
    setDropTargetId(null);
  };

  const handleDragEnd = () => {
    setDraggedNodeId(null);
    setDropTargetId(null);
  };

  const { rootNodes } = buildHierarchyTree();

  // Render tree node recursively
  const renderTreeNode = (node) => {
    const hasChildren = node.children && node.children.length > 0;
    const isExpanded = expandedNodes.has(node.id);
    const isSelected = selectedNodeId === node.id;
    const isDragging = draggedNodeId === node.id;
    const isDropTarget = dropTargetId === node.id;
    const isComplete = node.positionName && node.numberOfEmployees;
    
    return (
      <div key={node.id} className={styles['tree-node-container']}>
        {/* Node */}
        <div
          className={`${styles['tree-node']} ${
            isComplete ? styles['complete'] : styles['incomplete']
          } ${
            isSelected ? styles['selected'] : ''
          } ${
            isDragging ? styles['dragging'] : ''
          } ${
            isDropTarget ? styles['drop-target'] : ''
          }`}
          draggable={!isGenerating}
          onDragStart={(e) => handleDragStart(e, node.id)}
          onDragOver={(e) => handleDragOver(e, node.id)}
          onDrop={(e) => handleDrop(e, node.id)}
          onDragEnd={handleDragEnd}
          onClick={() => setSelectedNodeId(node.id)}
          onDoubleClick={() => editPosition(node)}
          style={{
            marginLeft: `${node.level * 20}px`
          }}
        >
          {/* Expansion toggle */}
          <div className={styles['node-expand']}>
            {hasChildren ? (
              <button
                className={`${styles['expand-btn']} ${isExpanded ? styles['expanded'] : styles['collapsed']}`}
                onClick={(e) => {
                  e.stopPropagation();
                  toggleNodeExpansion(node.id);
                }}
                title={isExpanded ? "Collapse" : "Expand"}
              >
                {isExpanded ? '‚àí' : '+'}
              </button>
            ) : (
              <div className={styles['expand-spacer']} />
            )}
          </div>

          {/* Node content */}
          <div className={styles['node-content']}>
            <div className={styles['node-avatar']}>
              {isComplete ? 'üë§' : '‚≠ï'}
            </div>
            
            <div className={styles['node-info']}>
              <div className={styles['node-title']}>
                {node.positionName || '–ù–æ–≤–∞ –ø–æ–∑–∏—Ü–∏—ò–∞'}
              </div>
              <div className={styles['node-subtitle']}>
                {node.numberOfEmployees ? `${node.numberOfEmployees} –≤—Ä–∞–±–æ—Ç–µ–Ω–∏` : '–ö–ª–∏–∫–Ω–∏ –∑–∞ —É—Ä–µ–¥—É–≤–∞—ö–µ'}
              </div>
            </div>
          </div>

          {/* Node actions */}
          <div className={styles['node-actions']}>
            <button
              className={styles['action-btn']}
              onClick={(e) => {
                e.stopPropagation();
                addChildPosition(node.id);
              }}
              title="Add child position"
              disabled={isGenerating}
            >
              +
            </button>
            <button
              className={styles['action-btn']}
              onClick={(e) => {
                e.stopPropagation();
                editPosition(node);
              }}
              title="Edit position"
              disabled={isGenerating}
            >
              ‚úèÔ∏è
            </button>
            <button
              className={`${styles['action-btn']} ${styles['delete-btn']}`}
              onClick={(e) => {
                e.stopPropagation();
                if (confirm('Delete this position and all its children?')) {
                  deletePosition(node.id);
                }
              }}
              title="Delete position"
              disabled={isGenerating}
            >
              üóëÔ∏è
            </button>
          </div>
        </div>

        {/* Children */}
        {hasChildren && isExpanded && (
          <div className={styles['tree-children']}>
            {node.children.map(child => renderTreeNode(child))}
          </div>
        )}
      </div>
    );
  };

  return (
    <div className={styles['org-tree-builder']}>
      {/* Header */}
      <div className={styles['tree-header']}>
        <h3 className={styles['tree-title']}>üè¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞</h3>
        <div className={styles['tree-stats']}>
          <span>{positions.length} –ø–æ–∑–∏—Ü–∏–∏</span>
          <span>‚Ä¢</span>
          <span>{positions.filter(p => p.positionName && p.numberOfEmployees).length} –∑–∞–≤—Ä—à–µ–Ω–∏</span>
        </div>
        <div className={styles['tree-actions']}>
          <button
            className={styles['add-root-btn']}
            onClick={addNewRootPosition}
            disabled={isGenerating}
          >
            ‚ûï –î–æ–¥–∞—ò –≥–ª–∞–≤–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞
          </button>
        </div>
      </div>

      {/* Instructions */}
      <div className={styles['tree-instructions']}>
        <div className={styles['instruction-item']}>
          <span className={styles['instruction-icon']}>üñ±Ô∏è</span>
          <span>–ö–ª–∏–∫–Ω–∏ + –∑–∞ –¥–æ–¥–∞–≤–∞—ö–µ –ø–æ–¥—Ä–µ–¥–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏</span>
        </div>
        <div className={styles['instruction-item']}>
          <span className={styles['instruction-icon']}>‚úèÔ∏è</span>
          <span>–î–≤–æ–∫–ª–∏–∫ –∏–ª–∏ –∫–æ—Ä–∏—Å—Ç–∏ –∫–æ–ø—á–µ –∑–∞ —É—Ä–µ–¥—É–≤–∞—ö–µ</span>
        </div>
        <div className={styles['instruction-item']}>
          <span className={styles['instruction-icon']}>üîÑ</span>
          <span>–ü–æ–≤–ª–µ—á–∏ –∏ —Å–ø—É—à—Ç–∏ –∑–∞ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∏—Ä–∞—ö–µ</span>
        </div>
      </div>

      {/* Tree View */}
      <div className={styles['tree-container']}>
        {rootNodes.length > 0 ? (
          rootNodes.map(node => renderTreeNode(node))
        ) : (
          <div className={styles['empty-tree']}>
            <p>–ö–ª–∏–∫–Ω–µ—Ç–µ "–î–æ–¥–∞—ò –≥–ª–∞–≤–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞" –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ —Å–æ –∏–∑–≥—Ä–∞–¥–±–∞—Ç–∞ –Ω–∞ –≤–∞—à–∞—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—ò–∞</p>
          </div>
        )}
      </div>

      {/* Drop zones */}
      {draggedNodeId && (
        <div
          className={styles['root-drop-zone']}
          onDragOver={(e) => {
            e.preventDefault();
            setDropTargetId('root');
          }}
          onDrop={(e) => {
            e.preventDefault();
            const updatedPositions = positions.map(pos => 
              pos.id === draggedNodeId ? { ...pos, parentId: null } : pos
            );
            onChange('positions', updatedPositions);
            setDraggedNodeId(null);
            setDropTargetId(null);
          }}
        >
          üìã –°–ø—É—à—Ç–µ—Ç–µ –æ–≤–¥–µ –∑–∞ –≥–ª–∞–≤–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞
        </div>
      )}

      {/* Position Edit Modal */}
      {showModal && editingNodeId && (
        <EnhancedPositionModal
          position={positions.find(p => p.id === editingNodeId)}
          onSave={savePosition}
          onClose={() => {
            setShowModal(false);
            setEditingNodeId(null);
          }}
        />
      )}
    </div>
  );
};

/**
 * Interactive Organizational Chart Builder - Excel SmartArt Style
 * Full-screen interactive chart where users build their organization visually
 */
const InteractiveOrgChartBuilder = ({ positions, onChange, isGenerating }) => {
  const [selectedNodeId, setSelectedNodeId] = useState(null);
  const [editingNodeId, setEditingNodeId] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [draggedNodeId, setDraggedNodeId] = useState(null);
  const [hoveredNodeId, setHoveredNodeId] = useState(null);
  const [canvasTransform, setCanvasTransform] = useState({ x: 0, y: 0, scale: 1 });

  // Initialize with one empty position if none exist
  if (!positions || positions.length === 0) {
    const initialPosition = {
      id: Date.now(),
      positionName: '',
      numberOfEmployees: '',
      educationRequirements: '',
      experienceRequirements: '',
      responsibilities: '',
      parentId: null
    };
    onChange('positions', [initialPosition]);
    return null; // Will re-render with the new position
  }

  // Add new position
  const addPosition = (parentId = null) => {
    const newPosition = {
      id: Date.now(),
      positionName: '',
      numberOfEmployees: '',
      educationRequirements: '',
      experienceRequirements: '',
      responsibilities: '',
      parentId
    };
    onChange('positions', [...positions, newPosition]);
  };

  // Delete position
  const deletePosition = (positionId) => {
    // Also delete all children
    const getAllChildren = (id) => {
      const children = positions.filter(p => p.parentId === id);
      let allChildren = [...children];
      children.forEach(child => {
        allChildren = [...allChildren, ...getAllChildren(child.id)];
      });
      return allChildren;
    };

    const toDelete = [positionId, ...getAllChildren(positionId).map(p => p.id)];
    const updatedPositions = positions.filter(p => !toDelete.includes(p.id));
    onChange('positions', updatedPositions);
    
    if (selectedNodeId && toDelete.includes(selectedNodeId)) {
      setSelectedNodeId(null);
    }
  };

  // Open edit modal
  const editPosition = (position) => {
    setEditingNodeId(position.id);
    setShowModal(true);
  };

  // Save edited position
  const savePosition = (updatedData) => {
    const updatedPositions = positions.map(pos => 
      pos.id === editingNodeId ? { ...pos, ...updatedData } : pos
    );
    onChange('positions', updatedPositions);
    setShowModal(false);
    setEditingNodeId(null);
  };

  // Build hierarchy for rendering
  const buildHierarchy = () => {
    const positionMap = {};
    const rootNodes = [];

    // Create map
    positions.forEach(pos => {
      positionMap[pos.id] = { ...pos, children: [] };
    });

    // Build tree
    positions.forEach(pos => {
      if (pos.parentId && positionMap[pos.parentId]) {
        positionMap[pos.parentId].children.push(positionMap[pos.id]);
      } else {
        rootNodes.push(positionMap[pos.id]);
      }
    });

    return { positionMap, rootNodes };
  };

  // Calculate position layout
  const calculateLayout = (nodes, startX = 50, startY = 50, levelHeight = 120) => {
    const layout = {};
    
    const calculateNodeLayout = (node, x, y, level = 0) => {
      layout[node.id] = { x, y, level };
      
      if (node.children && node.children.length > 0) {
        const childSpacing = Math.max(200, 300 / node.children.length);
        const totalWidth = (node.children.length - 1) * childSpacing;
        let childX = x - totalWidth / 2;
        
        node.children.forEach((child, index) => {
          calculateNodeLayout(child, childX, y + levelHeight, level + 1);
          childX += childSpacing;
        });
      }
    };

    // Layout root nodes horizontally
    const rootSpacing = 400;
    let rootX = startX;
    
    nodes.forEach((rootNode, index) => {
      calculateNodeLayout(rootNode, rootX, startY);
      rootX += rootSpacing;
    });

    return layout;
  };

  const { rootNodes } = buildHierarchy();
  const layout = calculateLayout(rootNodes);

  // Handle drag operations
  const handleDragStart = (e, nodeId) => {
    setDraggedNodeId(nodeId);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e, nodeId) => {
    e.preventDefault();
    if (draggedNodeId && draggedNodeId !== nodeId) {
      setHoveredNodeId(nodeId);
    }
  };

  const handleDrop = (e, targetNodeId) => {
    e.preventDefault();
    if (draggedNodeId && draggedNodeId !== targetNodeId) {
      // Update hierarchy
      const updatedPositions = positions.map(pos => 
        pos.id === draggedNodeId ? { ...pos, parentId: targetNodeId } : pos
      );
      onChange('positions', updatedPositions);
    }
    setDraggedNodeId(null);
    setHoveredNodeId(null);
  };

  // Render connection lines
  const renderConnections = () => {
    const lines = [];
    
    positions.forEach(pos => {
      if (pos.parentId && layout[pos.id] && layout[pos.parentId]) {
        const parentLayout = layout[pos.parentId];
        const childLayout = layout[pos.id];
        
        lines.push(
          <svg
            key={`connection-${pos.id}`}
            className={styles['connection-line']}
            style={{
              position: 'absolute',
              left: Math.min(parentLayout.x, childLayout.x) + 75,
              top: Math.min(parentLayout.y, childLayout.y) + 40,
              width: Math.abs(childLayout.x - parentLayout.x) + 150,
              height: Math.abs(childLayout.y - parentLayout.y) + 80,
              pointerEvents: 'none',
              zIndex: 1
            }}
          >
            <line
              x1={parentLayout.x < childLayout.x ? 75 : Math.abs(childLayout.x - parentLayout.x) + 75}
              y1={parentLayout.y < childLayout.y ? 40 : Math.abs(childLayout.y - parentLayout.y) + 40}
              x2={parentLayout.x < childLayout.x ? Math.abs(childLayout.x - parentLayout.x) + 75 : 75}
              y2={parentLayout.y < childLayout.y ? Math.abs(childLayout.y - parentLayout.y) + 40 : 40}
              stroke="#cbd5e1"
              strokeWidth="2"
            />
          </svg>
        );
      }
    });
    
    return lines;
  };

  // Render org chart nodes
  const renderNodes = () => {
    return positions.map(position => {
      const pos = layout[position.id];
      if (!pos) return null;

      const isComplete = position.positionName && position.numberOfEmployees;
      const isSelected = selectedNodeId === position.id;
      const isHovered = hoveredNodeId === position.id;
      const isDragged = draggedNodeId === position.id;

      return (
        <div
          key={position.id}
          className={`${styles['org-node']} ${isComplete ? styles.complete : ''} ${isSelected ? styles.selected : ''} ${isHovered ? styles.hovered : ''} ${isDragged ? styles.dragged : ''}`}
          style={{
            position: 'absolute',
            left: pos.x * canvasTransform.scale + canvasTransform.x,
            top: pos.y * canvasTransform.scale + canvasTransform.y,
            transform: `scale(${canvasTransform.scale})`,
            zIndex: isDragged ? 1000 : isSelected ? 100 : 10
          }}
          draggable
          onDragStart={(e) => handleDragStart(e, position.id)}
          onDragOver={(e) => handleDragOver(e, position.id)}
          onDrop={(e) => handleDrop(e, position.id)}
          onClick={() => setSelectedNodeId(position.id)}
          onDoubleClick={() => editPosition(position)}
        >
          {/* Node Header */}
          <div className={styles['node-header']}>
            <div className={styles['node-avatar']}>
              {isComplete ? 'üë§' : '‚ûï'}
            </div>
            <div className={styles['node-actions']}>
              <button 
                className={styles['node-action']}
                onClick={(e) => {
                  e.stopPropagation();
                  addPosition(position.id);
                }}
                title="–î–æ–¥–∞—ò –ø–æ–¥—Ä–µ–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞"
              >
                ‚ûï
              </button>
              <button 
                className={styles['node-action']}
                onClick={(e) => {
                  e.stopPropagation();
                  deletePosition(position.id);
                }}
                title="–ò–∑–±—Ä–∏—à–∏ –ø–æ–∑–∏—Ü–∏—ò–∞"
              >
                ‚ùå
              </button>
            </div>
          </div>

          {/* Node Content */}
          <div className={styles['node-content']}>
            <h4 className={styles['node-title']}>
              {position.positionName || '–ù–æ–≤–∞ –ø–æ–∑–∏—Ü–∏—ò–∞'}
            </h4>
            <p className={styles['node-subtitle']}>
              {position.numberOfEmployees ? `${position.numberOfEmployees} –≤—Ä–∞–±–æ—Ç–µ–Ω–∏` : '–ö–ª–∏–∫–Ω–µ—Ç–µ –∑–∞ —É—Ä–µ–¥—É–≤–∞—ö–µ'}
            </p>
          </div>

          {/* Completion indicator */}
          <div className={styles['node-status']}>
            {isComplete ? '‚úÖ' : '‚è≥'}
          </div>
        </div>
      );
    });
  };

  return (
    <div className={styles['interactive-org-builder']}>
      {/* Toolbar */}
      <div className={styles['org-toolbar']}>
        <div className={styles['toolbar-left']}>
          <h2>üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞</h2>
          <div className={styles['org-stats']}>
            <span>{positions.length} –ø–æ–∑–∏—Ü–∏–∏</span>
            <span>‚Ä¢</span>
            <span>{positions.filter(p => p.positionName && p.numberOfEmployees).length} –∑–∞–≤—Ä—à–µ–Ω–∏</span>
          </div>
        </div>
        <div className={styles['toolbar-right']}>
          <button 
            className={styles['toolbar-btn']}
            onClick={() => addPosition()}
          >
            ‚ûï –î–æ–¥–∞—ò –ø–æ–∑–∏—Ü–∏—ò–∞
          </button>
          <button 
            className={styles['toolbar-btn']}
            onClick={() => setCanvasTransform({ x: 0, y: 0, scale: 1 })}
          >
            üéØ –†–µ—Å–µ—Ç–∏—Ä–∞—ò –ø–æ–≥–ª–µ–¥
          </button>
        </div>
      </div>

      {/* Interactive Canvas */}
      <div className={styles['org-canvas']}>
        {renderConnections()}
        {renderNodes()}
        
        {/* Instructions */}
        {positions.length === 1 && !positions[0].positionName && (
          <div className={styles['canvas-instructions']}>
            <h3>üöÄ –ó–∞–ø–æ—á–Ω–µ—Ç–µ —Å–æ –∏–∑–≥—Ä–∞–¥–±–∞—Ç–∞ –Ω–∞ –≤–∞—à–∞—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—ò–∞</h3>
            <ul>
              <li>üìù <strong>–î–≤–æ–∫–ª–∏–∫</strong> –Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞ –∑–∞ —É—Ä–µ–¥—É–≤–∞—ö–µ</li>
              <li>‚ûï <strong>–ö–ª–∏–∫–Ω–µ—Ç–µ ‚ûï</strong> –∑–∞ –¥–æ–¥–∞–≤–∞—ö–µ –ø–æ–¥—Ä–µ–¥–µ–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏</li>
              <li>üîó <strong>–ü–æ–≤–ª–µ—á–µ—Ç–µ –∏ —Å–ø—É—à—Ç–µ—Ç–µ</strong> –∑–∞ —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—ò–∞</li>
              <li>‚ùå <strong>–ö–ª–∏–∫–Ω–µ—Ç–µ ‚ùå</strong> –∑–∞ –±—Ä–∏—à–µ—ö–µ –ø–æ–∑–∏—Ü–∏–∏</li>
            </ul>
          </div>
        )}
      </div>

      {/* Edit Position Modal */}
      {showModal && editingNodeId && (
        <PositionEditModal
          position={positions.find(p => p.id === editingNodeId)}
          onSave={savePosition}
          onClose={() => {
            setShowModal(false);
            setEditingNodeId(null);
          }}
        />
      )}
    </div>
  );
};

/**
 * Modern Positions Builder Component - Redesigned with Beautiful Visual Appeal
 * Features modern card-based layout with engaging animations and professional design
 */
const ModernPositionsBuilder = ({ positions, onChange, isGenerating }) => {
  const { positionTemplate } = organizationActConfig;
  const [autoCollapsedPositions, setAutoCollapsedPositions] = useState(new Set());
  const [focusedCard, setFocusedCard] = useState(null);

  // Add new position
  const addPosition = () => {
    const newPosition = {
      id: Date.now(),
      positionName: '',
      numberOfEmployees: '',
      educationRequirements: '',
      experienceRequirements: '',
      responsibilities: ''
    };

    const updatedPositions = [...positions, newPosition];
    onChange('positions', updatedPositions);
    
    // Focus on the new card
    setFocusedCard(newPosition.id);
    setTimeout(() => setFocusedCard(null), 2000);
  };

  // Update position field with auto-collapse when complete
  const updatePosition = (id, field, value) => {
    const updatedPositions = positions.map(pos =>
      pos.id === id ? { ...pos, [field]: value } : pos
    );
    onChange('positions', updatedPositions);

    // Auto-collapse if position has required fields
    const updatedPosition = updatedPositions.find(pos => pos.id === id);
    if (updatedPosition && updatedPosition.positionName && updatedPosition.numberOfEmployees) {
      setTimeout(() => {
        setAutoCollapsedPositions(prev => new Set([...prev, id]));
      }, 1500);
    }
  };

  // Remove position
  const removePosition = (id) => {
    const updatedPositions = positions.filter(pos => pos.id !== id);
    onChange('positions', updatedPositions);
    setAutoCollapsedPositions(prev => {
      const newSet = new Set(prev);
      newSet.delete(id);
      return newSet;
    });
  };

  // Toggle position collapse/expand
  const togglePosition = (id) => {
    setAutoCollapsedPositions(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  // Calculate completion percentage for progress indicators
  const getCompletionPercentage = (position) => {
    const requiredFields = ['positionName', 'numberOfEmployees'];
    const optionalFields = ['educationRequirements', 'experienceRequirements', 'responsibilities'];
    
    const requiredComplete = requiredFields.filter(field => position[field]).length;
    const optionalComplete = optionalFields.filter(field => position[field]).length;
    
    return Math.round(((requiredComplete * 2 + optionalComplete) / (requiredFields.length * 2 + optionalFields.length)) * 100);
  };

  return (
    <div className={styles['modern-positions-builder']}>
      {/* Header with Add Button */}
      <div className={styles['modern-builder-header']}>
        <div className={styles['builder-stats']}>
          <span className={styles['stat-item']}>
            <span className={styles['stat-number']}>{positions.length}</span>
            <span className={styles['stat-label']}>–ø–æ–∑–∏—Ü–∏–∏</span>
          </span>
          <span className={styles['stat-item']}>
            <span className={styles['stat-number']}>
              {positions.filter(p => p.positionName && p.numberOfEmployees).length}
            </span>
            <span className={styles['stat-label']}>–≥–æ—Ç–æ–≤–∏</span>
          </span>
        </div>
        <button 
          type="button" 
          onClick={addPosition} 
          className={styles['modern-add-button']}
          disabled={isGenerating}
        >
          <span className={styles['add-button-icon']}>‚ú®</span>
          –î–æ–¥–∞—ò –Ω–æ–≤–∞ –ø–æ–∑–∏—Ü–∏—ò–∞
        </button>
      </div>

      {/* Empty State */}
      {positions.length === 0 && (
        <div className={styles['modern-empty-state']}>
          <div className={styles['empty-state-icon']}>üíº</div>
          <h4 className={styles['empty-state-title']}>–ó–∞–ø–æ—á–Ω–µ—Ç–µ –¥–∞ –≥—Ä–∞–¥–∏—Ç–µ</h4>
          <p className={styles['empty-state-description']}>
            –î–æ–¥–∞—ò—Ç–µ —ò–∞ –ø—Ä–≤–∞—Ç–∞ —Ä–∞–±–æ—Ç–Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞ –∏ –∏–∑–≥—Ä–∞–¥–µ—Ç–µ —ò–∞ –≤–∞—à–∞—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
          </p>
          <div className={styles['empty-state-features']}>
            <div className={styles['feature-item']}>‚ö° –ë—Ä–∑–æ –¥–æ–¥–∞–≤–∞—ö–µ</div>
            <div className={styles['feature-item']}>üìä –ê–≤—Ç–æ–º–∞—Ç—Å–∫–∞ —Ö–∏–µ—Ä–∞—Ä—Ö–∏—ò–∞</div>
            <div className={styles['feature-item']}>üéØ –ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–∏ –ø—Ä–µ–ø–æ—Ä–∞–∫–∏</div>
          </div>
        </div>
      )}

      {/* Position Cards Grid */}
      <div className={styles['modern-cards-grid']}>
        {positions.map((position, index) => {
          const isCollapsed = autoCollapsedPositions.has(position.id);
          const isFocused = focusedCard === position.id;
          const completionPercentage = getCompletionPercentage(position);
          const isComplete = position.positionName && position.numberOfEmployees;
          
          return (
            <div 
              key={position.id} 
              className={`${
                styles['modern-position-card']
              } ${
                isFocused ? styles['card-focused'] : ''
              } ${
                isComplete ? styles['card-complete'] : ''
              }`}
              data-position-id={position.id}
            >
              {/* Card Header */}
              <div className={styles['modern-card-header']}>
                <div className={styles['card-avatar']}>
                  <div className={styles['position-avatar']}>
                    {isComplete ? '‚úÖ' : 'üë§'}
                  </div>
                  <div className={styles['position-number']}>#{index + 1}</div>
                </div>
                
                <div className={styles['card-title-section']}>
                  <h4 className={styles['modern-card-title']}>
                    {position.positionName || '–ù–æ–≤–∞ –ø–æ–∑–∏—Ü–∏—ò–∞'}
                  </h4>
                  <p className={styles['modern-card-subtitle']}>
                    {position.numberOfEmployees ? `${position.numberOfEmployees} –≤—Ä–∞–±–æ—Ç–µ–Ω–∏` : '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞—ò –ø–æ–∑–∏—Ü–∏—ò–∞'}
                  </p>
                </div>

                <div className={styles['card-actions']}>
                  <div className={styles['completion-indicator']}>
                    <div 
                      className={styles['completion-circle']} 
                      style={{
                        background: `conic-gradient(#10b981 0deg ${completionPercentage * 3.6}deg, #f3f4f6 ${completionPercentage * 3.6}deg 360deg)`
                      }}
                    >
                      <span className={styles['completion-text']}>{completionPercentage}%</span>
                    </div>
                  </div>
                  
                  <button
                    type="button"
                    onClick={() => togglePosition(position.id)}
                    className={styles['modern-toggle-button']}
                    title={isCollapsed ? "–ü—Ä–æ—à–∏—Ä–∏" : "–°–≤—Ä—Ç–∏"}
                  >
                    {isCollapsed ? 'üìÇ' : 'üìÅ'}
                  </button>
                  
                  <button
                    type="button"
                    onClick={() => removePosition(position.id)}
                    className={styles['modern-delete-button']}
                    disabled={isGenerating}
                    title="–û—Ç—Å—Ç—Ä–∞–Ω–∏ –ø–æ–∑–∏—Ü–∏—ò–∞"
                  >
                    üóëÔ∏è
                  </button>
                </div>
              </div>
              
              {/* Progress Bar */}
              <div className={styles['card-progress-container']}>
                <div className={styles['card-progress-bar']}>
                  <div 
                    className={styles['card-progress-fill']}
                    style={{ width: `${completionPercentage}%` }}
                  />
                </div>
              </div>

              {/* Collapsible Content */}
              {!isCollapsed && (
                <div className={styles['modern-card-content']}>
                  <div className={styles['modern-form-grid']}>
                    {/* Row 1: Basic Information */}
                    <div className={styles['form-row']}>
                      <div className={styles['modern-field']}>
                        <label className={styles['modern-label']}>
                          <span className={styles['label-icon']}>üíº</span>
                          {positionTemplate.positionName.label}
                          <span className={styles['required-asterisk']}>*</span>
                        </label>
                        <input
                          type="text"
                          value={position.positionName || ''}
                          onChange={(e) => updatePosition(position.id, 'positionName', e.target.value)}
                          className={styles['modern-input']}
                          placeholder={positionTemplate.positionName.placeholder}
                          disabled={isGenerating}
                        />
                      </div>

                      <div className={styles['modern-field']}>
                        <label className={styles['modern-label']}>
                          <span className={styles['label-icon']}>üë•</span>
                          {positionTemplate.numberOfEmployees.label}
                          <span className={styles['required-asterisk']}>*</span>
                        </label>
                        <input
                          type="text"
                          value={position.numberOfEmployees || ''}
                          onChange={(e) => updatePosition(position.id, 'numberOfEmployees', e.target.value)}
                          className={styles['modern-input']}
                          placeholder={positionTemplate.numberOfEmployees.placeholder}
                          disabled={isGenerating}
                        />
                      </div>
                    </div>

                    {/* Expandable Details Section */}
                    <div className={styles['details-section']}>
                      <h5 className={styles['details-header']}>üìã –î–µ—Ç–∞–ª–Ω–∏ –±–∞—Ä–∞—ö–∞</h5>
                      
                      <div className={styles['modern-field']}>
                        <label className={styles['modern-label']}>
                          <span className={styles['label-icon']}>üéì</span>
                          {positionTemplate.educationRequirements.label}
                        </label>
                        <textarea
                          value={position.educationRequirements || ''}
                          onChange={(e) => updatePosition(position.id, 'educationRequirements', e.target.value)}
                          className={styles['modern-textarea']}
                          placeholder={positionTemplate.educationRequirements.placeholder}
                          rows={3}
                          disabled={isGenerating}
                        />
                      </div>

                      <div className={styles['modern-field']}>
                        <label className={styles['modern-label']}>
                          <span className={styles['label-icon']}>‚≠ê</span>
                          {positionTemplate.experienceRequirements.label}
                        </label>
                        <textarea
                          value={position.experienceRequirements || ''}
                          onChange={(e) => updatePosition(position.id, 'experienceRequirements', e.target.value)}
                          className={styles['modern-textarea']}
                          placeholder={positionTemplate.experienceRequirements.placeholder}
                          rows={2}
                          disabled={isGenerating}
                        />
                      </div>

                      <div className={styles['modern-field']}>
                        <label className={styles['modern-label']}>
                          <span className={styles['label-icon']}>üìù</span>
                          {positionTemplate.responsibilities.label}
                        </label>
                        <textarea
                          value={position.responsibilities || ''}
                          onChange={(e) => updatePosition(position.id, 'responsibilities', e.target.value)}
                          className={styles['modern-textarea']}
                          placeholder={positionTemplate.responsibilities.placeholder}
                          rows={4}
                          disabled={isGenerating}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Card Footer */}
                  <div className={styles['modern-card-footer']}>
                    <div className={styles['footer-status']}>
                      {isComplete ? (
                        <span className={styles['status-complete']}>‚ú® –ü–æ–∑–∏—Ü–∏—ò–∞—Ç–∞ –µ –≥–æ—Ç–æ–≤–∞</span>
                      ) : (
                        <span className={styles['status-incomplete']}>‚è≥ –î–æ–ø–æ–ª–Ω–µ—Ç–µ –≥–∏ –∑–∞–¥–æ–ª–∂–∏—Ç–µ–ª–Ω–∏—Ç–µ –ø–æ–ª–∏—ö–∞</span>
                      )}
                    </div>
                    <button 
                      className={styles['quick-collapse-btn']} 
                      onClick={() => togglePosition(position.id)}
                    >
                      –°–≤—Ä—Ç–∏ –∫–∞—Ä—Ç–∏—á–∫–∞
                    </button>
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

/**
 * Enhanced Positions Manager Component - Phase 2
 * Implements compact cards with auto-collapse and real-time updates
 */
const PositionsManager = ({ positions, onChange, isGenerating }) => {
  const { positionTemplate } = organizationActConfig;
  const [editingPosition, setEditingPosition] = useState(null);
  const [autoCollapsedPositions, setAutoCollapsedPositions] = useState(new Set());

  // Add new position
  const addPosition = () => {
    const newPosition = {
      id: Date.now(),
      positionName: '',
      numberOfEmployees: '',
      educationRequirements: '',
      experienceRequirements: '',
      responsibilities: ''
    };

    const updatedPositions = [...positions, newPosition];
    onChange('positions', updatedPositions);
  };

  // Update position field
  const updatePosition = (id, field, value) => {
    const updatedPositions = positions.map(pos =>
      pos.id === id ? { ...pos, [field]: value } : pos
    );
    onChange('positions', updatedPositions);
  };

  // Remove position
  const removePosition = (id) => {
    const updatedPositions = positions.filter(pos => pos.id !== id);
    onChange('positions', updatedPositions);
    // Also remove from collapsed state
    setAutoCollapsedPositions(prev => {
      const newSet = new Set(prev);
      newSet.delete(id);
      return newSet;
    });
  };

  // Toggle position collapse/expand
  const togglePosition = (id) => {
    setAutoCollapsedPositions(prev => {
      const newSet = new Set(prev);
      if (newSet.has(id)) {
        newSet.delete(id);
      } else {
        newSet.add(id);
      }
      return newSet;
    });
  };

  return (
    <div className={styles['positions-section']}>
      <div className={styles['section-header']}>
        <h4>–†–∞–±–æ—Ç–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏</h4>
        <button 
          type="button" 
          onClick={addPosition} 
          className={styles['add-button']}
          disabled={isGenerating}
        >
          + –î–æ–¥–∞—ò –ø–æ–∑–∏—Ü–∏—ò–∞
        </button>
      </div>

      {positions.length === 0 && (
        <div className={styles['empty-state']}>
          <p>–ù–µ–º–∞—Ç–µ –¥–æ–¥–∞–¥–µ–Ω–æ —Ä–∞–±–æ—Ç–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏. –ö–ª–∏–∫–Ω–µ—Ç–µ –Ω–∞ "–î–æ–¥–∞—ò –ø–æ–∑–∏—Ü–∏—ò–∞" –∑–∞ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—Ç–µ.</p>
        </div>
      )}

      {positions.map((position, index) => {
        const isCollapsed = autoCollapsedPositions.has(position.id);
        const hasContent = position.positionName || position.numberOfEmployees;
        
        return (
          <div key={position.id} className={styles['position-card']}>
            <div 
              className={styles['position-header']} 
              onClick={() => hasContent && togglePosition(position.id)}
              style={{ cursor: hasContent ? 'pointer' : 'default' }}
            >
              <div className={styles['position-title']}>
                <h5>–ü–æ–∑–∏—Ü–∏—ò–∞ #{index + 1}</h5>
                {hasContent && (
                  <span className={styles['position-summary']}>
                    {position.positionName} {position.numberOfEmployees && `(${position.numberOfEmployees})`}
                  </span>
                )}
              </div>
              <div className={styles['position-header-actions']}>
                {hasContent && (
                  <button
                    type="button"
                    onClick={(e) => {
                      e.stopPropagation();
                      togglePosition(position.id);
                    }}
                    className={styles['collapse-button']}
                    title={isCollapsed ? "–ü—Ä–æ—à–∏—Ä–∏" : "–°–≤—Ä—Ç–∏"}
                  >
                    {isCollapsed ? '‚ñº' : '‚ñ≤'}
                  </button>
                )}
                <button
                  type="button"
                  onClick={(e) => {
                    e.stopPropagation();
                    removePosition(position.id);
                  }}
                  className={styles['remove-button']}
                  disabled={isGenerating}
                  title="–û—Ç—Å—Ç—Ä–∞–Ω–∏ –ø–æ–∑–∏—Ü–∏—ò–∞"
                >
                  √ó
                </button>
              </div>
            </div>
            
            {!isCollapsed && (
              <div className={styles['position-fields']}>
                <div className={styles['field-row']}>
                  <div className={styles.field}>
                    <label>{positionTemplate.positionName.label} *</label>
                    <input
                      type="text"
                      value={position.positionName || ''}
                      onChange={(e) => updatePosition(position.id, 'positionName', e.target.value)}
                      className={styles.input}
                      placeholder={positionTemplate.positionName.placeholder}
                      disabled={isGenerating}
                    />
                  </div>

                  <div className={styles.field}>
                    <label>{positionTemplate.numberOfEmployees.label} *</label>
                    <input
                      type="text"
                      value={position.numberOfEmployees || ''}
                      onChange={(e) => updatePosition(position.id, 'numberOfEmployees', e.target.value)}
                      className={styles.input}
                      placeholder={positionTemplate.numberOfEmployees.placeholder}
                      disabled={isGenerating}
                    />
                  </div>
                </div>

                <div className={styles.field}>
                  <label>{positionTemplate.educationRequirements.label}</label>
                  <textarea
                    value={position.educationRequirements || ''}
                    onChange={(e) => updatePosition(position.id, 'educationRequirements', e.target.value)}
                    className={styles.textarea}
                    placeholder={positionTemplate.educationRequirements.placeholder}
                    rows={positionTemplate.educationRequirements.rows}
                    disabled={isGenerating}
                  />
                </div>

                <div className={styles.field}>
                  <label>{positionTemplate.experienceRequirements.label}</label>
                  <textarea
                    value={position.experienceRequirements || ''}
                    onChange={(e) => updatePosition(position.id, 'experienceRequirements', e.target.value)}
                    className={styles.textarea}
                    placeholder={positionTemplate.experienceRequirements.placeholder}
                    rows={positionTemplate.experienceRequirements.rows}
                    disabled={isGenerating}
                  />
                </div>

                <div className={styles.field}>
                  <label>{positionTemplate.responsibilities.label}</label>
                  <textarea
                    value={position.responsibilities || ''}
                    onChange={(e) => updatePosition(position.id, 'responsibilities', e.target.value)}
                    className={styles.textarea}
                    placeholder={positionTemplate.responsibilities.placeholder}
                    rows={positionTemplate.responsibilities.rows}
                    disabled={isGenerating}
                  />
                </div>
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
};

/**
 * Enhanced Position Modal - Modern, comprehensive position editing
 * Features auto-save, validation, and intelligent suggestions
 */
const EnhancedPositionModal = ({ position, onSave, onClose }) => {
  const { positionTemplate } = organizationActConfig;
  const [formData, setFormData] = useState({
    positionName: position.positionName || '',
    numberOfEmployees: position.numberOfEmployees || '',
    educationRequirements: position.educationRequirements || '',
    experienceRequirements: position.experienceRequirements || '',
    responsibilities: position.responsibilities || ''
  });
  const [validationErrors, setValidationErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);

  // Position suggestions based on common roles
  const positionSuggestions = [
    '–ì–ª–∞–≤–µ–Ω –∏–∑–≤—Ä—à–µ–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä',
    '–¢–µ—Ö–Ω–∏—á–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä',
    '–û–ø–µ—Ä–∞—Ç–∏–≤–µ–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä',
    '–§–∏–Ω–∞–Ω—Å–∏—Å–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä',
    '–ú–µ–Ω–∞—ü–µ—Ä –∑–∞ —á–æ–≤–µ—á–∫–∏ —Ä–µ—Å—É—Ä—Å–∏',
    '–ò–¢ –º–µ–Ω–∞—ü–µ—Ä',
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –º–µ–Ω–∞—ü–µ—Ä',
    '–ú–µ–Ω–∞—ü–µ—Ä –∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞',
    '–ü—Ä–æ–≥—Ä–∞–º–µ—Ä',
    '–í–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º–µ—Ä',
    '–ü–æ–º–ª–∞–¥ –ø—Ä–æ–≥—Ä–∞–º–µ—Ä',
    '–ë–∏–∑–Ω–∏—Å –∞–Ω–∞–ª–∏—Ç–∏—á–∞—Ä',
    '–ü—Ä–æ–µ–∫—Ç–µ–Ω –º–µ–Ω–∞—ü–µ—Ä',
    '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–µ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫',
    '–°–º–µ—Ç–∫–æ–≤–æ–¥–∏—Ç–µ–ª',
    '–ö–æ—Ä–∏—Å–Ω–∏—á–∫–∞ –ø–æ–¥–¥—Ä—à–∫–∞'
  ];

  // Real-time validation
  const validateField = (fieldName, value) => {
    const errors = { ...validationErrors };
    
    switch (fieldName) {
      case 'positionName':
        if (!value.trim()) {
          errors.positionName = 'Position name is required';
        } else if (value.trim().length < 2) {
          errors.positionName = 'Position name must be at least 2 characters';
        } else {
          delete errors.positionName;
        }
        break;
      
      case 'numberOfEmployees':
        if (!value.trim()) {
          errors.numberOfEmployees = 'Number of employees is required';
        } else if (!/^\d+/.test(value.trim())) {
          errors.numberOfEmployees = 'Must start with a number';
        } else {
          delete errors.numberOfEmployees;
        }
        break;
        
      default:
        break;
    }
    
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    validateField(field, value);
  };

  const handleSave = async () => {
    // Validate all required fields
    const isValid = validateField('positionName', formData.positionName) && 
                   validateField('numberOfEmployees', formData.numberOfEmployees);
    
    if (!isValid) {
      return;
    }

    setIsSubmitting(true);
    
    try {
      // Simulate save delay for better UX
      await new Promise(resolve => setTimeout(resolve, 500));
      onSave(formData);
    } catch (error) {
      console.error('Error saving position:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Escape') {
      onClose();
    } else if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault();
      handleSave();
    }
  };

  const fillSuggestion = (suggestion) => {
    handleChange('positionName', suggestion);
    setShowSuggestions(false);
  };

  const getCompletionPercentage = () => {
    const fields = ['positionName', 'numberOfEmployees', 'educationRequirements', 'experienceRequirements', 'responsibilities'];
    const completed = fields.filter(field => {
      const value = formData[field];
      if (!value) return false;
      if (typeof value === 'string') return value.trim().length > 0;
      if (Array.isArray(value)) return value.length > 0;
      return true;
    }).length;
    return Math.round((completed / fields.length) * 100);
  };

  return (
    <div className={styles['modal-overlay']} onClick={onClose}>
      <div 
        className={styles['enhanced-position-modal']} 
        onClick={(e) => e.stopPropagation()} 
        onKeyDown={handleKeyDown}
      >
        {/* Modal Header */}
        <div className={styles['enhanced-modal-header']}>
          <div className={styles['modal-title-section']}>
            <h2 className={styles['modal-title']}>‚úèÔ∏è –£—Ä–µ–¥—É–≤–∞—ö–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞</h2>
            <div className={styles['completion-badge']}>
              <div className={styles['completion-circle']}>
                <span>{getCompletionPercentage()}%</span>
              </div>
              <span>–ó–∞–≤—Ä—à–µ–Ω–æ</span>
            </div>
          </div>
          <button className={styles['enhanced-close-btn']} onClick={onClose}>
            ‚úï
          </button>
        </div>

        {/* Modal Body */}
        <div className={styles['enhanced-modal-body']}>
          {/* Essential Information */}
          <div className={styles['modal-section']}>
            <h3 className={styles['section-title']}>
              <span className={styles['section-icon']}>üìã</span>
              –û—Å–Ω–æ–≤–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            </h3>
            
            <div className={styles['form-row']}>
              <div className={styles['form-group']}>
                <label className={styles['enhanced-label']}>
                  üíº –ù–∞—Å–ª–æ–≤ –Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞ *
                </label>
                <div className={styles['input-with-suggestions']}>
                  <input
                    type="text"
                    value={formData.positionName}
                    onChange={(e) => handleChange('positionName', e.target.value)}
                    onFocus={() => setShowSuggestions(true)}
                    onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}
                    placeholder="Enter position title..."
                    className={`${styles['enhanced-input']} ${
                      validationErrors.positionName ? styles['input-error'] : ''
                    }`}
                    autoFocus
                  />
                  
                  {/* Suggestions dropdown */}
                  {showSuggestions && (
                    <div className={styles['suggestions-dropdown']}>
                      {positionSuggestions
                        .filter(suggestion => 
                          suggestion.toLowerCase().includes(formData.positionName.toLowerCase()) ||
                          formData.positionName === ''
                        )
                        .slice(0, 8)
                        .map((suggestion, index) => (
                          <button
                            key={index}
                            className={styles['suggestion-item']}
                            onMouseDown={() => fillSuggestion(suggestion)}
                          >
                            {suggestion}
                          </button>
                        ))
                      }
                    </div>
                  )}
                </div>
                {validationErrors.positionName && (
                  <span className={styles['error-message']}>{validationErrors.positionName}</span>
                )}
              </div>

              <div className={styles['form-group']}>
                <label className={styles['enhanced-label']}>
                  üë• Number of Employees *
                </label>
                <input
                  type="text"
                  value={formData.numberOfEmployees}
                  onChange={(e) => handleChange('numberOfEmployees', e.target.value)}
                  placeholder="e.g., 1 (–µ–¥–µ–Ω), 3 (—Ç—Ä–∏)"
                  className={`${styles['enhanced-input']} ${
                    validationErrors.numberOfEmployees ? styles['input-error'] : ''
                  }`}
                />
                {validationErrors.numberOfEmployees && (
                  <span className={styles['error-message']}>{validationErrors.numberOfEmployees}</span>
                )}
              </div>
            </div>
          </div>

          {/* Requirements & Qualifications */}
          <div className={styles['modal-section']}>
            <h3 className={styles['section-title']}>
              <span className={styles['section-icon']}>üéØ</span>
              Requirements & Qualifications
            </h3>
            
            <div className={styles['form-group']}>
              <label className={styles['enhanced-label']}>
                üéì Education Requirements
              </label>
              <textarea
                value={formData.educationRequirements}
                onChange={(e) => handleChange('educationRequirements', e.target.value)}
                placeholder="e.g., Bachelor's degree in relevant field, specific certifications..."
                className={styles['enhanced-textarea']}
                rows={3}
              />
            </div>

            <div className={styles['form-group']}>
              <label className={styles['enhanced-label']}>
                ‚≠ê Experience Requirements
              </label>
              <textarea
                value={formData.experienceRequirements}
                onChange={(e) => handleChange('experienceRequirements', e.target.value)}
                placeholder="e.g., 3+ years of experience in similar role, specific skills..."
                className={styles['enhanced-textarea']}
                rows={2}
              />
            </div>
          </div>

          {/* Job Responsibilities */}
          <div className={styles['modal-section']}>
            <h3 className={styles['section-title']}>
              <span className={styles['section-icon']}>üìù</span>
              Job Responsibilities
            </h3>
            
            <div className={styles['form-group']}>
              <label className={styles['enhanced-label']}>
                üìã Main Responsibilities
              </label>
              <textarea
                value={formData.responsibilities}
                onChange={(e) => handleChange('responsibilities', e.target.value)}
                placeholder="Describe the main duties and responsibilities for this position..."
                className={styles['enhanced-textarea']}
                rows={5}
              />
            </div>
          </div>
        </div>

        {/* Modal Footer */}
        <div className={styles['enhanced-modal-footer']}>
          <div className={styles['footer-left']}>
            <div className={styles['keyboard-shortcuts']}>
              <span className={styles['shortcut']}>
                <kbd>Ctrl</kbd> + <kbd>Enter</kbd> to save
              </span>
              <span className={styles['shortcut']}>
                <kbd>Esc</kbd> to cancel
              </span>
            </div>
          </div>
          
          <div className={styles['footer-actions']}>
            <button 
              className={styles['cancel-btn']} 
              onClick={onClose}
              disabled={isSubmitting}
            >
              Cancel
            </button>
            <button 
              className={`${styles['save-btn']} ${isSubmitting ? styles['saving'] : ''}`}
              onClick={handleSave}
              disabled={isSubmitting || Object.keys(validationErrors).length > 0}
            >
              {isSubmitting ? (
                <>
                  <span className={styles['spinner']} />
                  Saving...
                </>
              ) : (
                <>üíæ Save Position</>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

/**
 * Position Edit Modal - Excel-like editing experience
 */
const PositionEditModal = ({ position, onSave, onClose }) => {
  const { positionTemplate } = organizationActConfig;
  const [formData, setFormData] = useState({
    positionName: position.positionName || '',
    numberOfEmployees: position.numberOfEmployees || '',
    educationRequirements: position.educationRequirements || '',
    experienceRequirements: position.experienceRequirements || '',
    responsibilities: position.responsibilities || ''
  });

  const handleChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSave = () => {
    onSave(formData);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Escape') {
      onClose();
    } else if (e.key === 'Enter' && e.ctrlKey) {
      handleSave();
    }
  };

  return (
    <div className={styles['modal-overlay']} onClick={onClose}>
      <div className={styles['position-edit-modal']} onClick={(e) => e.stopPropagation()} onKeyDown={handleKeyDown}>
        {/* Modal Header */}
        <div className={styles['modal-header']}>
          <h3>‚úèÔ∏è –£—Ä–µ–¥—É–≤–∞—ö–µ –Ω–∞ –ø–æ–∑–∏—Ü–∏—ò–∞</h3>
          <button className={styles['close-button']} onClick={onClose}>√ó</button>
        </div>

        {/* Modal Body */}
        <div className={styles['modal-body']}>
          <div className={styles['modal-form']}>
            {/* Essential Fields */}
            <div className={styles['form-section']}>
              <h4>üìã –û—Å–Ω–æ–≤–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</h4>
              <div className={styles['form-grid']}>
                <div className={styles['form-field']}>
                  <label>
                    üíº {positionTemplate.positionName.label} *
                  </label>
                  <input
                    type="text"
                    value={formData.positionName}
                    onChange={(e) => handleChange('positionName', e.target.value)}
                    placeholder={positionTemplate.positionName.placeholder}
                    className={styles['modal-input']}
                    autoFocus
                  />
                </div>
                <div className={styles['form-field']}>
                  <label>
                    üë• {positionTemplate.numberOfEmployees.label} *
                  </label>
                  <input
                    type="text"
                    value={formData.numberOfEmployees}
                    onChange={(e) => handleChange('numberOfEmployees', e.target.value)}
                    placeholder={positionTemplate.numberOfEmployees.placeholder}
                    className={styles['modal-input']}
                  />
                </div>
              </div>
            </div>

            {/* Detailed Requirements */}
            <div className={styles['form-section']}>
              <h4>üéØ –î–µ—Ç–∞–ª–Ω–∏ –±–∞—Ä–∞—ö–∞</h4>
              <div className={styles['form-field']}>
                <label>
                  üéì {positionTemplate.educationRequirements.label}
                </label>
                <textarea
                  value={formData.educationRequirements}
                  onChange={(e) => handleChange('educationRequirements', e.target.value)}
                  placeholder={positionTemplate.educationRequirements.placeholder}
                  className={styles['modal-textarea']}
                  rows={3}
                />
              </div>
              <div className={styles['form-field']}>
                <label>
                  ‚≠ê {positionTemplate.experienceRequirements.label}
                </label>
                <textarea
                  value={formData.experienceRequirements}
                  onChange={(e) => handleChange('experienceRequirements', e.target.value)}
                  placeholder={positionTemplate.experienceRequirements.placeholder}
                  className={styles['modal-textarea']}
                  rows={2}
                />
              </div>
              <div className={styles['form-field']}>
                <label>
                  üìù {positionTemplate.responsibilities.label}
                </label>
                <textarea
                  value={formData.responsibilities}
                  onChange={(e) => handleChange('responsibilities', e.target.value)}
                  placeholder={positionTemplate.responsibilities.placeholder}
                  className={styles['modal-textarea']}
                  rows={4}
                />
              </div>
            </div>
          </div>
        </div>

        {/* Modal Actions */}
        <div className={styles['modal-actions']}>
          <div className={styles['modal-shortcut-hint']}>
            üí° Ctrl+Enter –∑–∞ –∑–∞—á—É–≤—É–≤–∞—ö–µ ‚Ä¢ Esc –∑–∞ –æ—Ç–∫–∞–∂—É–≤–∞—ö–µ
          </div>
          <div className={styles['modal-buttons']}>
            <button className={styles['cancel-btn']} onClick={onClose}>
              –û—Ç–∫–∞–∂–∏
            </button>
            <button className={styles['save-btn']} onClick={handleSave}>
              üíæ –ó–∞—á—É–≤–∞—ò
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OrganizationActPage;