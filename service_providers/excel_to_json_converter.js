#!/usr/bin/env node

const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

// Configuration
const EXCEL_FILE_PATH = './service_providers/legal/CopyZofZSKOPJE.xlsx';
const OUTPUT_JSON_PATH = './service_providers_legal_skopje.json';

console.log('üîÑ Converting Excel file to JSON format for service providers...');

try {
  // Read the Excel file
  console.log('üìñ Reading Excel file:', EXCEL_FILE_PATH);
  const workbook = XLSX.readFile(EXCEL_FILE_PATH);

  // Get the first sheet name
  const sheetName = workbook.SheetNames[0];
  console.log('üìÑ Processing sheet:', sheetName);

  // Convert sheet to JSON
  const worksheet = workbook.Sheets[sheetName];
  const jsonData = XLSX.utils.sheet_to_json(worksheet);

  console.log(`üìä Found ${jsonData.length} rows in Excel file`);

  // Display first few rows to understand the structure
  console.log('\nüîç First 3 rows structure:');
  jsonData.slice(0, 3).forEach((row, index) => {
    console.log(`Row ${index + 1}:`, Object.keys(row));
    console.log('Values:', row);
    console.log('---');
  });

  // Map Excel data to service provider format
  const serviceProviders = jsonData.map((row, index) => {
    // Get all column names to understand the data structure
    const columns = Object.keys(row);
    console.log(`Processing row ${index + 1}, columns:`, columns);

    // Try to map common column patterns
    const name = row['Company Name'] || row['Name'] || row['–ò–º–µ'] || row['–ö–æ–º–ø–∞–Ω–∏—ò–∞'] || row['–ö–û–ú–ü–ê–ù–ò–à–ê'] ||
                 row['company_name'] || row['name'] || row['–Ω–∞–∑–∏–≤'] || row['–ù–∞–∑–∏–≤'] || Object.values(row)[0] || '';

    const email = row['Email'] || row['E-mail'] || row['EMAIL'] || row['–ï-–ø–æ—à—Ç–∞'] || row['email'] ||
                  row['contact_email'] || row['–º–µ—ò–ª'] || row['–ú–µ—ò–ª'] || '';

    const phone = row['Phone'] || row['Telephone'] || row['Tel'] || row['–¢–µ–ª–µ—Ñ–æ–Ω'] || row['phone'] ||
                  row['—Ç–µ–ª–µ—Ñ–æ–Ω'] || row['–∫–æ–Ω—Ç–∞–∫—Ç'] || row['–ö–æ–Ω—Ç–∞–∫—Ç'] || '';

    const website = row['Website'] || row['Web'] || row['URL'] || row['–≤–µ–±'] || row['–í–µ–±'] ||
                    row['website'] || row['–≤–µ–±-—Å—Ç—Ä–∞–Ω–∞'] || '';

    const address = row['Address'] || row['–ê–¥—Ä–µ—Å–∞'] || row['address'] || row['–∞–¥—Ä–µ—Å–∞'] || '';

    const description = row['Description'] || row['Services'] || row['–£—Å–ª—É–≥–∏'] || row['–û–ø–∏—Å'] ||
                       row['description'] || row['—É—Å–ª—É–≥–∏'] || row['–¥–µ–ª–æ–≤–Ω–æ—Å—Ç'] || '';

    // If no clear mapping found, try to use first few columns
    if (!name && columns.length > 0) {
      console.log(`‚ö†Ô∏è  Could not identify name column for row ${index + 1}. Available columns:`, columns);
    }

    return {
      name: String(name).trim() || `Company ${index + 1}`,
      email: String(email).trim().toLowerCase() || `contact${index + 1}@example.mk`,
      phone: String(phone).trim() || '',
      website: String(website).trim() || '',
      serviceCategory: 'legal',
      specializations: [],
      description: String(description).trim() || '–ü—Ä–∞–≤–Ω–∏ —É—Å–ª—É–≥–∏ –≤–æ –°–∫–æ–ø—ò–µ',
      location: '–°–∫–æ–ø—ò–µ',
      businessInfo: {
        registrationNumber: '',
        taxNumber: '',
        languagesSupported: ['mk', 'en']
      },
      // Additional fields from Excel if available
      address: String(address).trim() || '',
      // Store original Excel row for reference
      _originalData: row
    };
  }).filter(provider => {
    // Filter out empty rows or rows without essential data
    return provider.name && provider.name !== 'Company ' && provider.name.length > 2;
  });

  console.log(`\n‚úÖ Successfully processed ${serviceProviders.length} valid service providers`);

  // Save to JSON file
  fs.writeFileSync(OUTPUT_JSON_PATH, JSON.stringify(serviceProviders, null, 2), 'utf8');
  console.log(`üíæ JSON file saved to: ${OUTPUT_JSON_PATH}`);

  // Display summary
  console.log('\nüìã Summary:');
  console.log(`- Total providers: ${serviceProviders.length}`);
  console.log(`- Category: legal`);
  console.log(`- Location: –°–∫–æ–ø—ò–µ`);

  // Show first few converted entries
  console.log('\nüîç First 3 converted entries:');
  serviceProviders.slice(0, 3).forEach((provider, index) => {
    console.log(`${index + 1}. ${provider.name}`);
    console.log(`   Email: ${provider.email}`);
    console.log(`   Phone: ${provider.phone}`);
    console.log(`   Description: ${provider.description}`);
    console.log('---');
  });

  console.log(`\nüöÄ Ready for bulk import! Copy the content from ${OUTPUT_JSON_PATH} and paste it into the bulk import textbox.`);

} catch (error) {
  console.error('‚ùå Error converting Excel file:', error.message);

  if (error.code === 'ENOENT') {
    console.log('\nüí° Make sure the Excel file exists at:', EXCEL_FILE_PATH);
  }

  process.exit(1);
}